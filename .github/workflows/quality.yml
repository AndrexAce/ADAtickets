name: Build, test and analyze
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'microsoft'

      - name: Set up .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Cache NuGet packages
        id: cache-nuget-packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
       
      - name: Install dotnet-coverage NuGet package and tool
        if: steps.cache-nuget-packages.outputs.cache-hit != 'true'
        shell: bash
        run: dotnet tool install -g dotnet-coverage
      
      - name: Trust ASP.NET certificates
        shell: bash
        run: dotnet dev-certs https --trust

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin \
          /k:"AndrexAce_ADAtickets" \
          /o:"andrexace" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.scanner.skipJreProvisioning=true \
          /d:sonar.dotnet.excludeTestProjects=true \
          /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml \

      - name: Build the solution
        env:
          POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: dotnet build -c Release --no-incremental --property:postgresUsername=$POSTGRES_USERNAME --property:postgresPassword=$POSTGRES_PASSWORD

      - name: Run tests
        run: dotnet test -c Release --no-build

      - name: Collect code coverage
        if: always()
        shell: bash
        run: dotnet-coverage collect "dotnet test -c Release --no-build" -f xml -o "coverage.xml"

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: always()
        shell: bash
        run: |
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      # - name: SonarQube Quality Gate check
      #   id: sonarqube-quality-gate-check
      #   uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
      #   with:
      #       scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
      #   env:
      #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   if: always()

      # - name: "Show SonarQube Quality Gate Status value"
      #   if: always()
      #   run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
