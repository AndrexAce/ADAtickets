// <auto-generated />
using System;
using ADAtickets.ApiService.Configs;
using ADAtickets.ApiService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ADAtickets.ApiService.Migrations
{
    [DbContext(typeof(ADAticketsDbContext))]
    partial class ADAticketsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "priority", new[] { "high", "low", "medium" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "status", new[] { "closed", "unassigned", "waiting_operator", "waiting_user" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "ticket_type", new[] { "bug", "feature" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_type", new[] { "admin", "operator", "user" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ADAtickets.ApiService.Models.Attachment", b =>
                {
                    b.Property<string>("Path")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("path");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.HasKey("Path", "TicketId")
                        .HasName("pk_attachments");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_attachments_ticket_id");

                    b.ToTable("attachments", (string)null);
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Edit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("EditDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edit_date_time");

                    b.Property<Status>("NewStatus")
                        .HasColumnType("status")
                        .HasColumnName("new_status");

                    b.Property<Status>("OldStatus")
                        .HasColumnType("status")
                        .HasColumnName("old_status");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("user_email");

                    b.HasKey("Id")
                        .HasName("pk_edits");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_edits_ticket_id");

                    b.HasIndex("UserEmail")
                        .HasDatabaseName("ix_edits_user_email");

                    b.ToTable("edits", (string)null);
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("message");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("user_email");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_notifications_ticket_id");

                    b.HasIndex("UserEmail")
                        .HasDatabaseName("ix_notifications_user_email");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Platform", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("name");

                    b.Property<string>("RepositoryUrl")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("repository_url");

                    b.HasKey("Name")
                        .HasName("pk_platforms");

                    b.HasIndex("RepositoryUrl")
                        .IsUnique()
                        .HasDatabaseName("ix_platforms_repository_url");

                    b.ToTable("platforms", (string)null);
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Reply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthorUserEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("author_user_email");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("message");

                    b.Property<DateTimeOffset>("ReplyDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reply_date_time");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.HasKey("Id")
                        .HasName("pk_replies");

                    b.HasIndex("AuthorUserEmail")
                        .HasDatabaseName("ix_replies_author_user_email");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_replies_ticket_id");

                    b.ToTable("replies", (string)null);
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatorUserEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("creator_user_email");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<string>("OperatorUserEmail")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("operator_user_email");

                    b.Property<string>("PlatformName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("platform_name");

                    b.Property<Priority>("Priority")
                        .HasColumnType("priority")
                        .HasColumnName("priority");

                    b.Property<Status>("Status")
                        .HasColumnType("status")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<TicketType>("Type")
                        .HasColumnType("ticket_type")
                        .HasColumnName("type");

                    b.Property<int>("WorkItemId")
                        .HasColumnType("integer")
                        .HasColumnName("work_item_id");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.HasIndex("CreatorUserEmail")
                        .HasDatabaseName("ix_tickets_creator_user_email");

                    b.HasIndex("OperatorUserEmail")
                        .HasDatabaseName("ix_tickets_operator_user_email");

                    b.HasIndex("PlatformName")
                        .HasDatabaseName("ix_tickets_platform_name");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<bool>("AreEmailNotificationsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("are_email_notifications_enabled");

                    b.Property<bool>("ArePhoneNotificationsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("are_phone_notifications_enabled");

                    b.Property<bool>("IsEmail2FAEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email2fa_enabled");

                    b.Property<bool>("IsPhone2FAEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_phone2fa_enabled");

                    b.Property<string>("MicrosoftAccountId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("microsoft_account_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.Property<UserType>("Type")
                        .HasColumnType("user_type")
                        .HasColumnName("type");

                    b.HasKey("Email")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.UserNotification", b =>
                {
                    b.Property<string>("ReceiverUserEmail")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("receiver_user_email");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.HasKey("ReceiverUserEmail", "NotificationId")
                        .HasName("pk_user_notifications");

                    b.HasIndex("NotificationId")
                        .HasDatabaseName("ix_user_notifications_notification_id");

                    b.ToTable("user_notifications", (string)null);
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.UserPlatform", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("user_email");

                    b.Property<string>("PlatformName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("platform_name");

                    b.HasKey("UserEmail", "PlatformName")
                        .HasName("pk_user_platforms");

                    b.HasIndex("PlatformName")
                        .HasDatabaseName("ix_user_platforms_platform_name");

                    b.ToTable("user_platforms", (string)null);
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Attachment", b =>
                {
                    b.HasOne("ADAtickets.ApiService.Models.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attachments_tickets_ticket_id");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Edit", b =>
                {
                    b.HasOne("ADAtickets.ApiService.Models.Ticket", "Ticket")
                        .WithMany("Edits")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_edits_tickets_ticket_id");

                    b.HasOne("ADAtickets.ApiService.Models.User", "User")
                        .WithMany("Edits")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_edits_users_user_email");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Notification", b =>
                {
                    b.HasOne("ADAtickets.ApiService.Models.Ticket", "Ticket")
                        .WithMany("Notifications")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_tickets_ticket_id");

                    b.HasOne("ADAtickets.ApiService.Models.User", "User")
                        .WithMany("SentNotifications")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_users_user_email");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Reply", b =>
                {
                    b.HasOne("ADAtickets.ApiService.Models.User", "AuthorUser")
                        .WithMany("Replies")
                        .HasForeignKey("AuthorUserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_replies_users_author_user_email");

                    b.HasOne("ADAtickets.ApiService.Models.Ticket", "Ticket")
                        .WithMany("Replies")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_replies_tickets_ticket_id");

                    b.Navigation("AuthorUser");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Ticket", b =>
                {
                    b.HasOne("ADAtickets.ApiService.Models.User", "CreatorUser")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("CreatorUserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_users_creator_user_email");

                    b.HasOne("ADAtickets.ApiService.Models.User", "OperatorUser")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("OperatorUserEmail")
                        .HasConstraintName("fk_tickets_users_operator_user_email");

                    b.HasOne("ADAtickets.ApiService.Models.Platform", "Platform")
                        .WithMany("Tickets")
                        .HasForeignKey("PlatformName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_platforms_platform_name");

                    b.Navigation("CreatorUser");

                    b.Navigation("OperatorUser");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.UserNotification", b =>
                {
                    b.HasOne("ADAtickets.ApiService.Models.Notification", "Notification")
                        .WithMany("SentNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notifications_notifications_notification_id");

                    b.HasOne("ADAtickets.ApiService.Models.User", "ReceiverUser")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverUserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notifications_users_receiver_user_email");

                    b.Navigation("Notification");

                    b.Navigation("ReceiverUser");
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.UserPlatform", b =>
                {
                    b.HasOne("ADAtickets.ApiService.Models.Platform", "Platform")
                        .WithMany("UsersPreferred")
                        .HasForeignKey("PlatformName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_platforms_platforms_platform_name");

                    b.HasOne("ADAtickets.ApiService.Models.User", "User")
                        .WithMany("PreferredPlatforms")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_platforms_users_user_email");

                    b.Navigation("Platform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Notification", b =>
                {
                    b.Navigation("SentNotifications");
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Platform", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("UsersPreferred");
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.Ticket", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Edits");

                    b.Navigation("Notifications");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ADAtickets.ApiService.Models.User", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("CreatedTickets");

                    b.Navigation("Edits");

                    b.Navigation("PreferredPlatforms");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("Replies");

                    b.Navigation("SentNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
