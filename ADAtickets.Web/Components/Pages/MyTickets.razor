<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@page "/my-tickets"
@layout MainLayout

@using System.Globalization
@using ADAtickets.Client
@using ADAtickets.Shared.Constants
@using ADAtickets.Shared.Dtos.Responses
@using ADAtickets.Shared.Models
@using ADAtickets.Web.Components.Layout
@using ADAtickets.Web.Components.Shared
@using ADAtickets.Web.Components.Utilities
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject IStringLocalizer<MyTickets> loc
@inject TicketsClient ticketsClient
@inject UsersClient usersClient
@inject PlatformsClient platformsClient
@inject IToastService toastService

@attribute [Authorize(Policy = Policy.Everyone)]

<PageTitle>ADAtickets - @loc["Title"]</PageTitle>
<FluentStack Orientation="Orientation.Vertical">
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.End">
        <FluentMenuButton Text="@loc["ActionsButton"]" IconStart="@(new Icons.Regular.Size20.SelectAllOn())">
            <FluentLabel Typo="Typography.H6">@loc["EditStatusMenuLabel"]</FluentLabel>
            <FluentMenuItem Label="@loc["DeleteMenuItem"]" Value="Delete">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.DeleteDismiss())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["CloseMenuItem"]" Value="Close">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Checkmark())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentDivider />
            <FluentLabel Typo="Typography.H6">@loc["AssignmentMenuLabel"]</FluentLabel>
            <FluentMenuItem Label="@loc["AssignMenuItem"]" MenuItems="GetUsersMenuItems()">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Person())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
        </FluentMenuButton>
        <FluentMenuButton Text="@loc["EditViewButton"]" IconStart="@(new Icons.Regular.Size20.TextAlignLeft())">
            <FluentLabel Typo="Typography.H6">@loc["SortMenuLabel"]</FluentLabel>
            <FluentMenuItem Label="@loc["SortTitleMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.TextCaseTitle())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortAscendantMenuItem"]" Value="Sort|Title|Asc" />
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortDescendantMenuItem"]" Value="Sort|Title|Desc" />
                </MenuItems>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortLastUpdateMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Calendar())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortAscendantMenuItem"]" Value="Sort|LastUpdate|Asc" />
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortDescendantMenuItem"]" Value="Sort|LastUpdate|Desc" />
                </MenuItems>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortPriorityMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.ArrowDownExclamation())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortAscendantMenuItem"]" Value="Sort|Priority|Asc" />
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortDescendantMenuItem"]" Value="Sort|Priority|Desc" />
                </MenuItems>
            </FluentMenuItem>
            <FluentDivider />
            <FluentLabel Typo="Typography.H6">@loc["FilterMenuLabel"]</FluentLabel>
            <FluentMenuItem Label="@loc["FilterOperatorMenuItem"]" MenuItems="GetUsersMenuItems(isFilter: true)">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Person())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortLastUpdateMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Calendar())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterLastUpdateHourMenuItem"]" Value="Filter|LastUpdate|Hour" />
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterLastUpdateDayMenuItem"]" Value="Filter|LastUpdate|Day" />
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterLastUpdateWeekMenuItem"]" Value="Filter|LastUpdate|Week" />
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterLastUpdateMonthMenuItem"]" Value="Filter|LastUpdate|Month" />
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterLastUpdateYearMenuItem"]" Value="Filter|LastUpdate|Year" />
                </MenuItems>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["FilterCategoryMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Tag())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterCategoryBugMenuItem"]" Value="Filter|Category|Bug" />
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterCategoryFeatureMenuItem"]" Value="Filter|Category|Feature" />
                </MenuItems>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["FilterPlatformMenuItem"]" MenuItems="GetPlatformsMenuItems()">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Apps())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortPriorityMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.ArrowDownExclamation())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterPriorityLowMenuItem"]" Value="Filter|Priority|Low" />
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterPriorityMediumMenuItem"]" Value="Filter|Priority|Medium" />
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterPriorityHighMenuItem"]" Value="Filter|Priority|High" />
                </MenuItems>
            </FluentMenuItem>
        </FluentMenuButton>
    </FluentStack>
    <FluentTabs Size="TabSize.Small" Width="100%" OnTabChange="HandleTabChange">
        <FluentTab Label="@loc["AllTab"]" Icon="@(new Icons.Regular.Size20.Grid())" Id="tab-1">
        </FluentTab>
        <FluentTab Label="@loc["UnassignedTab"]" Icon="@(new Icons.Regular.Size20.Question())" Id="tab-2">
        </FluentTab>
        <FluentTab Label="@loc["ToReplyTab"]" Icon="@(new Icons.Regular.Size20.ArrowReply())" Id="tab-3">
        </FluentTab>
        <FluentTab Label="@loc["WaitingTab"]" Icon="@(new Icons.Regular.Size20.HourglassHalf())" Id="tab-4">
        </FluentTab>
        <FluentTab Label="@loc["ClosedTab"]" Icon="@(new Icons.Regular.Size20.Checkmark())" Id="tab-5">
        </FluentTab>
    </FluentTabs>

    @if (isLoading)
    {
        <div style="width: 100%; display: flex; align-items: center; padding: 2rem; flex-direction: column;">
            <FluentProgressRing />
        </div>
    }
    else if (!tickets.Any())
    {
        <div style="width: 100%; display: flex; align-items: center; padding: 2rem; flex-direction: column;">
            <FluentIcon Value="@(new Icons.Filled.Size20.Checkmark())" Color="@Color.Accent" />
            <FluentLabel Typo="Typography.H6">@loc["NoTicketsText"]</FluentLabel>
        </div>
    }
    else
    {
        <div class="tickets-grid">
            @foreach (var ticket in tickets)
            {
                <TicketCard Ticket="@ticket" SelectedChanged="HandleSelectedChanged"/>
            }
        </div>
    }
</FluentStack>

@code {
    private IEnumerable<TicketResponseDto> tickets = Enumerable.Empty<TicketResponseDto>();  
    private IEnumerable<PlatformResponseDto> platforms = Enumerable.Empty<PlatformResponseDto>();  
    private IEnumerable<UserResponseDto> users = Enumerable.Empty<UserResponseDto>();
    private readonly HashSet<Guid> selectedTickets = new HashSet<Guid>();
    private bool isLoading = true;  

    protected override async Task OnInitializedAsync()  
    {  
        try
        {
            await LoadUsers();
            await LoadTickets(null);
            await LoadPlatforms(null);

            isLoading = false;
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["LoadingErrorToastTitle"], loc["LoadingErrorToastDetails"]));
        }
    }

    private async Task LoadUsers()
    {
        var result = await usersClient.GetAllAsync();
        users = result.Item2;
    }

    private async Task LoadTickets(IEnumerable<KeyValuePair<string, string>>? filters)
    {
        var result = await ticketsClient.GetAllAsync(filters);
        tickets = result.Item2;
    }

    private async Task LoadPlatforms(IEnumerable<KeyValuePair<string, string>>? filters)
    {
        var result = await platformsClient.GetAllAsync(filters);
        platforms = result.Item2;
    }

    private static IEnumerable<KeyValuePair<string, string>>? GetFilters(FluentTab fluentTab)  
    {  
        return fluentTab.Id switch  
        {  
            "tab-1" => null,  
            "tab-2" => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.Unassigned) } },  
            "tab-3" => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.WaitingOperator) } },  
            "tab-4" => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.WaitingUser) } },  
            "tab-5" => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.Closed) } },  
            _ => null  
        };  
    }  

    private RenderFragment GetUsersMenuItems(bool isFilter = false) => builder =>  
    {  
        foreach (var user in users)  
        {  
            builder.OpenComponent<FluentMenuItem>(0);
            if (isFilter) builder.AddAttribute(0, "Role", MenuItemRole.MenuItem);
            builder.AddAttribute(isFilter ? 1 : 0, "Label", $"{user.Name} {user.Surname}");
            builder.AddAttribute(isFilter ? 2 : 1, "Value", isFilter ? $"Filter|Operator|{user.Id}" : $"AssignTo|{user.Id}");
            builder.CloseComponent();  
        }  
    };

    private RenderFragment GetPlatformsMenuItems() => builder =>
    {
        foreach (var platform in platforms)
        {
            builder.OpenComponent<FluentMenuItem>(0);
            builder.AddAttribute(0, "Role", MenuItemRole.MenuItem);
            builder.AddAttribute(1, "Label", platform.Name);
            builder.AddAttribute(2, "Value", $"Filter|Platform|{platform.Id}");
            builder.CloseComponent();
        }
    };

    private async Task HandleTabChange(FluentTab fluentTab)
    {
        var filters = GetFilters(fluentTab);
        await LoadTickets(filters);
    }

    private void HandleSelectedChanged(SelectedChangedEventArgs args)
    {
        if (args.IsSelected)
        {
            selectedTickets.Add(args.TicketId);
        }
        else
        {
            selectedTickets.Remove(args.TicketId);
        }
    }
}