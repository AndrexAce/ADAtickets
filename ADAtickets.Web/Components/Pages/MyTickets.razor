<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@page "/my-tickets"
@layout MainLayout

@using System.Globalization
@using ADAtickets.Client
@using ADAtickets.Shared.Constants
@using ADAtickets.Shared.Dtos.Responses
@using ADAtickets.Shared.Models
@using ADAtickets.Web.Components.Layout
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject IStringLocalizer<MyTickets> loc
@inject TicketsClient ticketsClient
@inject UsersClient usersClient

@attribute [Authorize(Policy = Policy.Everyone)]

<PageTitle>ADAtickets - @loc["Title"]</PageTitle>
<FluentStack Orientation="Orientation.Vertical">
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.End">
        <FluentMenuButton Text="@loc["ActionsButton"]" IconStart="@(new Icons.Regular.Size20.SelectAllOn())">
            <FluentLabel Typo="Typography.H6">@loc["EditStatusMenuLabel"]</FluentLabel>
            <FluentMenuItem Label="@loc["DeleteMenuItem"]">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.DeleteDismiss())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["CloseMenuItem"]">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Checkmark())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentDivider />
            <FluentLabel Typo="Typography.H6">@loc["AssignmentMenuLabel"]</FluentLabel>
            <FluentMenuItem Label="@loc["AssignMenuItem"]" MenuItems="GetUsersMenuItems()">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Person())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
        </FluentMenuButton>
        <FluentMenuButton Text="@loc["EditViewButton"]" IconStart="@(new Icons.Regular.Size20.TextAlignLeft())">
            <FluentLabel Typo="Typography.H6">@loc["SortMenuLabel"]</FluentLabel>
            <FluentMenuItem Label="@loc["SortTitleMenuItem"]" MenuItems="GetSortMenuItems()">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.TextCaseTitle())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortLastUpdateMenuItem"]" MenuItems="GetSortMenuItems()">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Calendar())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortPriorityMenuItem"]" MenuItems="GetSortMenuItems()">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.ArrowDownExclamation())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentDivider />
            <FluentLabel Typo="Typography.H6">@loc["FilterMenuLabel"]</FluentLabel>
            <FluentMenuItem Label="@loc["FilterOperatorMenuItem"]">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Person())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortLastUpdateMenuItem"]">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Calendar())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["FilterCategoryMenuItem"]">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Tag())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["FilterPlatformMenuItem"]">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Apps())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortPriorityMenuItem"]">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.ArrowDownExclamation())" Color="Color.Neutral" Slot="start" /></span>
            </FluentMenuItem>
        </FluentMenuButton>
    </FluentStack>
    <FluentTabs Size="TabSize.Small" Width="100%" OnTabChange="HandleTabChange">
        <FluentTab Label="@loc["AllTab"]" Icon="@(new Icons.Regular.Size24.Grid())" Id="tab-1">
        </FluentTab>
        <FluentTab Label="@loc["UnassignedTab"]" Icon="@(new Icons.Regular.Size24.Question())" Id="tab-2">
        </FluentTab>
        <FluentTab Label="@loc["ToReplyTab"]" Icon="@(new Icons.Regular.Size24.ArrowReply())" Id="tab-3">
        </FluentTab>
        <FluentTab Label="@loc["WaitingTab"]" Icon="@(new Icons.Regular.Size24.HourglassHalf())" Id="tab-4">
        </FluentTab>
        <FluentTab Label="@loc["ClosedTab"]" Icon="@(new Icons.Regular.Size24.Checkmark())" Id="tab-5">
        </FluentTab>
    </FluentTabs>

    @if (isLoading)
    {
        <div style="width: 100%; display: flex; align-items: center; padding: 2rem; flex-direction: column;">
            <FluentProgressRing />
        </div>
    }
    else if (!tickets.Any())
    {
        <div style="width: 100%; display: flex; align-items: center; padding: 2rem; flex-direction: column;">
            <FluentIcon Value="@(new Icons.Filled.Size24.Checkmark())" Color="@Color.Accent" />
            <FluentLabel Typo="Typography.H6">@loc["NoTicketsText"]</FluentLabel>
        </div>
    }
    else
    {
        <div class="tickets-grid">
            @foreach (var ticket in tickets)
            {
                <TicketCard Ticket="@ticket" />
            }
        </div>
    }
</FluentStack>

@code {  
    private IEnumerable<TicketResponseDto> tickets = Enumerable.Empty<TicketResponseDto>();  
    private IEnumerable<UserResponseDto> users = Enumerable.Empty<UserResponseDto>();

    private bool isLoading = true;  
  
    protected override async Task OnInitializedAsync()  
    {  
        await LoadUsers();  
        await LoadTickets(null);  
    }

    private async Task LoadUsers()
    {
        var result = await usersClient.GetAllAsync();
        users = result.Item2;
    }

    private async Task LoadTickets(IEnumerable<KeyValuePair<string, string>>? filters)
    {
        try
        {
            var result = await ticketsClient.GetAllAsync(filters);
            tickets = result.Item2;
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private static IEnumerable<KeyValuePair<string, string>>? GetFilters(FluentTab fluentTab)  
    {  
        return fluentTab.Id switch  
        {  
            "tab-1" => null,  
            "tab-2" => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.Unassigned) } },  
            "tab-3" => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.WaitingOperator) } },  
            "tab-4" => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.WaitingUser) } },  
            "tab-5" => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.Closed) } },  
            _ => null  
        };  
    }  
  
    private RenderFragment GetUsersMenuItems() => builder =>  
    {  
        foreach (var user in users)  
        {  
            builder.OpenComponent<FluentMenuItem>(0);
            builder.AddAttribute(1, "Label", $"{user.Name} {user.Surname}");
            builder.AddAttribute(2, "Value", $"{user.Id}");
            builder.CloseComponent();  
        }  
    };

    private RenderFragment GetSortMenuItems() => builder =>  
    {  
        builder.OpenComponent<FluentMenuItem>(0);
        builder.AddAttribute(1, "Label", loc["SortAscendantMenuItem"]);
        builder.AddAttribute(2, "Value", "asc");
        builder.CloseComponent();
        builder.OpenComponent<FluentMenuItem>(1);
        builder.AddAttribute(1, "Label", loc["SortDescendantMenuItem"]);
        builder.AddAttribute(2, "Value", "desc");
        builder.CloseComponent();
    };

    private async Task HandleTabChange(FluentTab fluentTab)
    {
        var filters = GetFilters(fluentTab);
        await LoadTickets(filters);
    }
}