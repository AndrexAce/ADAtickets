<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@page "/my-tickets"
@layout MainLayout

@using System.Globalization
@using System.Net
@using System.Security.Claims
@using ADAtickets.Client
@using ADAtickets.Shared.Constants
@using ADAtickets.Shared.Dtos.Requests
@using ADAtickets.Shared.Dtos.Responses
@using ADAtickets.Shared.Extensions
@using ADAtickets.Shared.Models
@using ADAtickets.Web.Components.Layout
@using ADAtickets.Web.Components.Shared
@using ADAtickets.Web.Components.Utilities
@using AutoMapper
@using Humanizer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Identity.Web
@using static ADAtickets.Web.Components.Utilities.Dialogs

@inject IStringLocalizer<MyTickets> loc
@inject TicketsClient ticketsClient
@inject UsersClient usersClient
@inject PlatformsClient platformsClient
@inject IToastService toastService
@inject IDialogService dialogService
@inject IMapper mapper
@inject AuthenticationStateProvider authenticationStateProvider
@inject IConfiguration configuration

@attribute [Authorize(Policy = Policy.Everyone)]

<PageTitle>ADAtickets - @loc["Title"]</PageTitle>
<FluentStack Orientation="Orientation.Vertical">
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.End">
        @if (currentSort is not null && currentSortDirection is not null)
        {
            <FluentBadge Appearance="Appearance.Accent" Circular="true" OnDismissClick="HandleSortDismissClick" DismissIcon="@(new Icons.Regular.Size20.Dismiss().WithColor(Color.Fill))">
                @if (currentSortDirection == "asc")
                {
                    <FluentIcon Color="Color.Fill" Value="@(new Icons.Regular.Size20.ArrowSortUp())" />
                }
                else
                {
                    <FluentIcon Color="Color.Fill" Value="@(new Icons.Regular.Size20.ArrowSortDown())" />
                }
                @currentSort
            </FluentBadge>
        }
        @if (activeUserFilter is not null)
        {
            <FluentBadge Appearance="Appearance.Accent" Circular="true" OnDismissClick="HandleFilterUserDismissClick" DismissIcon="@(new Icons.Regular.Size20.Dismiss().WithColor(Color.Fill))">
                <FluentIcon Color="Color.Fill" Value="@(new Icons.Regular.Size20.Person())" />
                @activeUserFilter.Name @activeUserFilter.Surname
            </FluentBadge>
        }
        @if (activePlatformFilter is not null)
        {
            <FluentBadge Appearance="Appearance.Accent" Circular="true" OnDismissClick="HandleFilterPlatformDismissClick" DismissIcon="@(new Icons.Regular.Size20.Dismiss().WithColor(Color.Fill))">
                <FluentIcon Color="Color.Fill" Value="@(new Icons.Regular.Size20.Apps())" />
                @activePlatformFilter.Name
            </FluentBadge>
        }
        @if (activePriorityFilter.HasValue)
        {
            <FluentBadge Appearance="Appearance.Accent" Circular="true" OnDismissClick="HandleFilterPriorityDismissClick" DismissIcon="@(new Icons.Regular.Size20.Dismiss().WithColor(Color.Fill))">
                <FluentIcon Color="Color.Fill" Value="@(new Icons.Regular.Size20.ArrowDownExclamation())" />
                @GetPriorityFilterBadgeText()
            </FluentBadge>
        }
        @if (activeTypeFilter.HasValue)
        {
            <FluentBadge Appearance="Appearance.Accent" Circular="true" OnDismissClick="HandleFilterTypeDismissClick" DismissIcon="@(new Icons.Regular.Size20.Dismiss().WithColor(Color.Fill))">
                <FluentIcon Color="Color.Fill" Value="@(new Icons.Regular.Size20.Tag())" />
                @GetTypeFilterBadgeText()
            </FluentBadge>
        }
        @if (activeDateFilter.HasValue)
        {
            <FluentBadge Appearance="Appearance.Accent" Circular="true" OnDismissClick="HandleFilterDateDismissClick" DismissIcon="@(new Icons.Regular.Size20.Dismiss().WithColor(Color.Fill))">
                <FluentIcon Color="Color.Fill" Value="@(new Icons.Regular.Size20.Calendar())" />
                @activeDateFilter?.ToLocalTime().Humanize()
            </FluentBadge>
        }
        @if (selectedTickets.Count > 0)
        {
            <FluentMenuButton Text="@loc["ActionsButton"]" IconStart="@(new Icons.Regular.Size20.SelectAllOn())">
                <FluentLabel Typo="Typography.H6">@loc["EditStatusMenuLabel"]</FluentLabel>
                <FluentMenuItem Label="@loc["DeleteMenuItem"]" OnClick="HandleDeleteClickAsync">
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.DeleteDismiss())" Color="Color.Neutral" Slot="start" /></span>
                </FluentMenuItem>
                <FluentMenuItem Label="@loc["CloseMenuItem"]" OnClick="HandleCloseClickAsync">
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Checkmark())" Color="Color.Neutral" Slot="start" /></span>
                </FluentMenuItem>
                <FluentDivider />
                <FluentLabel Typo="Typography.H6">@loc["AssignMenuLabel"]</FluentLabel>
                <FluentMenuItem Label="@loc["AssignMenuItem"]">
                    <ChildContent>
                        <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Person())" Color="Color.Neutral" Slot="start" /></span>
                    </ChildContent>
                    <MenuItems>
                        @foreach (var user in Users ?? [])
                        {
                            <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@($"{user.Name} {user.Surname}")" OnClick="args => HandleAssignClickAsync(user.Id)"/>
                        }
                    </MenuItems>
                </FluentMenuItem>
            </FluentMenuButton>
        }
        <FluentMenuButton Text="@loc["EditViewButton"]" IconStart="@(new Icons.Regular.Size20.TextAlignLeft())">
            <FluentLabel Typo="Typography.H6">@loc["SortMenuLabel"]</FluentLabel>
            <FluentMenuItem Label="@loc["SortTitleMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.TextCaseTitle())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortAscendantMenuItem"]" OnClick='args => HandleSortTitleClick("asc")'/>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortDescendantMenuItem"]" OnClick='args => HandleSortTitleClick("desc")'/>
                </MenuItems>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortLastUpdateMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Calendar())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortAscendantMenuItem"]" OnClick='args => HandleSortLastUpdateClick("asc")'/>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortDescendantMenuItem"]" OnClick='args => HandleSortLastUpdateClick("desc")'/>
                </MenuItems>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortPriorityMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.ArrowDownExclamation())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortAscendantMenuItem"]" OnClick='args => HandleSortPriorityClick("asc")'/>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["SortDescendantMenuItem"]" OnClick='args => HandleSortPriorityClick("desc")'/>
                </MenuItems>
            </FluentMenuItem>
            <FluentDivider />
            <FluentLabel Typo="Typography.H6">@loc["FilterMenuLabel"]</FluentLabel>
            <FluentMenuItem Label="@loc["FilterUserMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Person())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    @foreach (var user in Users ?? [])
                    {
                        <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@($"{user.Name} {user.Surname}")" OnClick="args => HandleFilterUserClick(user)" />
                    }
                </MenuItems>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortLastUpdateMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Calendar())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterLastUpdateHourMenuItem"]" OnClick="args => HandleFilterLastUpdateClick(DateTimeOffset.UtcNow - TimeSpan.FromHours(1))"/>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterLastUpdateDayMenuItem"]" OnClick="args => HandleFilterLastUpdateClick(DateTimeOffset.UtcNow - TimeSpan.FromDays(1))"/>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterLastUpdateWeekMenuItem"]" OnClick="args => HandleFilterLastUpdateClick(DateTimeOffset.UtcNow - TimeSpan.FromDays(7))"/>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterLastUpdateMonthMenuItem"]" OnClick="args => HandleFilterLastUpdateClick(DateTimeOffset.UtcNow - TimeSpan.FromDays(30))"/>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterLastUpdateYearMenuItem"]" OnClick="args => HandleFilterLastUpdateClick(DateTimeOffset.UtcNow - TimeSpan.FromDays(365))"/>
                </MenuItems>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["FilterCategoryMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Tag())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterCategoryBugMenuItem"]" OnClick="args => HandleFilterCategoryClick(TicketType.Bug)"/>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterCategoryFeatureMenuItem"]" OnClick="args => HandleFilterCategoryClick(TicketType.Feature)"/>
                </MenuItems>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["FilterPlatformMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Apps())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    @foreach (var platform in platforms ?? [])
                    {
                        <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@($"{platform.Name}")" OnClick="args => HandleFilterPlatformClick(platform)"/>
                    }
                </MenuItems>
            </FluentMenuItem>
            <FluentMenuItem Label="@loc["SortPriorityMenuItem"]">
                <ChildContent>
                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.ArrowDownExclamation())" Color="Color.Neutral" Slot="start" /></span>
                </ChildContent>
                <MenuItems>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterPriorityLowMenuItem"]" OnClick="args => HandleFilterPriorityClick(Priority.Low)"/>
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterPriorityMediumMenuItem"]" OnClick="args => HandleFilterPriorityClick(Priority.Medium)" />
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@loc["FilterPriorityHighMenuItem"]" OnClick="args => HandleFilterPriorityClick(Priority.High)" />
                </MenuItems>
            </FluentMenuItem>
        </FluentMenuButton>
    </FluentStack>
    <FluentTabs Size="TabSize.Small" Width="100%" OnTabChange="HandleTabChangeAsync">
        <FluentTab Label="@loc["AllTab"]" Icon="@(new Icons.Regular.Size20.Grid())" Id="AllTab">
        </FluentTab>
        <FluentTab Label="@loc["UnassignedTab"]" Icon="@(new Icons.Regular.Size20.Question())" Id="UnassignedTab">
        </FluentTab>
        <FluentTab Label="@loc["ToReplyTab"]" Icon="@(new Icons.Regular.Size20.ArrowReply())" Id="ToReplyTab">
        </FluentTab>
        <FluentTab Label="@loc["WaitingTab"]" Icon="@(new Icons.Regular.Size20.HourglassHalf())" Id="WaitingTab">
        </FluentTab>
        <FluentTab Label="@loc["ClosedTab"]" Icon="@(new Icons.Regular.Size20.Checkmark())" Id="ClosedTab">
        </FluentTab>
    </FluentTabs>

    @if (tickets is null)
    {
        <div style="width: 100%; display: flex; align-items: center; padding: 2rem; flex-direction: column;">
            <FluentProgressRing />
        </div>
    }
    else if (!tickets.Any())
    {
        <div style="width: 100%; display: flex; align-items: center; padding: 2rem; flex-direction: column;">
            <FluentIcon Value="@(new Icons.Filled.Size20.Checkmark())" Color="@Color.Accent" />
            <FluentLabel Typo="Typography.H6">@loc["NoTicketsText"]</FluentLabel>
        </div>
    }
    else
    {
        <div class="tickets-grid">
            <CascadingValue Value="@Users">
                @foreach (var ticket in tickets)
                {
                    <TicketCard Ticket="@ticket" SelectedChanged="HandleSelectedChanged" StateChanged="HandleStateChangedAsync"/>
                }
            </CascadingValue>
        </div>
    }
</FluentStack>

@code {
    #region Fields
    // Datasets
    private IEnumerable<UserResponseDto>? Users { get; set; }

    private IEnumerable<TicketResponseDto>? originalTickets;
    private IEnumerable<TicketResponseDto>? tickets;
    private IEnumerable<PlatformResponseDto>? platforms;

    // State management
    private readonly HashSet<Guid> selectedTickets = [];

    private string? currentTab;
    private string? currentSort;
    private string? currentSortDirection;

    private UserResponseDto? activeUserFilter;
    private PlatformResponseDto? activePlatformFilter;
    private Priority? activePriorityFilter;
    private TicketType? activeTypeFilter;
    private DateTimeOffset? activeDateFilter;
    #endregion

    #region Loading data
    protected override async Task OnInitializedAsync()
    {  
        try
        {
            await LoadUsersAsync();
            // Loads from the APIs only the tickets the user can see according to their identity and the selected tab.
            await LoadTicketsAsync(await GetBaseFiltersAsync());
            await LoadPlatformsAsync();
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["LoadingErrorToastTitle"], loc["LoadingErrorToastDetails"]));
        }
    }

    private async Task LoadUsersAsync()
    {
        Users = await usersClient.GetAllAsync();
    }

    private async Task LoadTicketsAsync(IEnumerable<KeyValuePair<string, string>> filters)
    {
        var result = await ticketsClient.GetAllAsync(filters);

        originalTickets = result.OrderByDescending(t => t.CreationDateTime);
        tickets = originalTickets;

        // After the tickets are retrieved, sort and filter based on the user preferences.
        ApplySelectedFiltersAndSort();
    }

    private async Task LoadPlatformsAsync()
    {
        platforms = await platformsClient.GetAllAsync();
    }
    #endregion

    #region Event handlers
    private void HandleSortDismissClick()
    {
        currentSort = null;
        currentSortDirection = null;
        ApplySelectedFiltersAndSort();
    }

    private void HandleFilterUserDismissClick()
    {
        activeUserFilter = null;
        ApplySelectedFiltersAndSort();
    }

    private void HandleFilterPlatformDismissClick()
    {
        activePlatformFilter = null;
        ApplySelectedFiltersAndSort();
    }

    private void HandleFilterPriorityDismissClick()
    {
        activePriorityFilter = null;
        ApplySelectedFiltersAndSort();
    }

    private void HandleFilterTypeDismissClick()
    {
        activeTypeFilter = null;
        ApplySelectedFiltersAndSort();
    }

    private void HandleFilterDateDismissClick()
    {
        activeDateFilter = null;
        ApplySelectedFiltersAndSort();
    }

    private async Task HandleTabChangeAsync(FluentTab fluentTab)
    {
        currentTab = fluentTab?.Id;
        await LoadTicketsAsync(await GetBaseFiltersAsync());
    }

    private void HandleSelectedChanged(SelectedChangedEventArgs args)
    {
        if (args.IsSelected)
        {
            selectedTickets.Add(args.TicketId);
        }
        else
        {
            selectedTickets.Remove(args.TicketId);
        }
    }

    private async Task HandleDeleteClickAsync()
    {
        await dialogService.ShowDialogAsync<SimpleDialog>(
            new SimpleDialogContent
            {
                Message = loc["DeleteConfirmDialogMessage"],
                ConfirmAction = HandleConfirmDeleteAsync,
                ConfirmButtonIcon = new Icons.Regular.Size20.DeleteDismiss(),
            },
            Dialogs.ConfirmDialogParameters(loc["DeleteConfirmDialogTitle"], loc["DeleteConfirmDialogConfirmButton"], loc["DeleteConfirmDialogCancelButton"]));
    }

    private async Task HandleCloseClickAsync()
    {
        await dialogService.ShowDialogAsync<SimpleDialog>(
            new SimpleDialogContent
            {
                Message = loc["CloseConfirmDialogMessage"],
                ConfirmAction = HandleConfirmCloseAsync,
                ConfirmButtonIcon = new Icons.Regular.Size20.Checkmark(),
            },
            Dialogs.ConfirmDialogParameters(loc["CloseConfirmDialogTitle"], loc["CloseConfirmDialogConfirmButton"], loc["CloseConfirmDialogCancelButton"]));
    }

    private async Task HandleAssignClickAsync(Guid operatorId)
    {
        await HandleAssignAsync(operatorId);
    }

    private async Task HandleConfirmDeleteAsync()
    {
        var progressToastParameters = Toasts.ProgressToastParameters("Delete", loc["DeleteProgressToastTitle"], loc["DeleteProgressToastDetails"]);

        toastService.ShowProgressToast(progressToastParameters);

        try
        {
            foreach (var ticketId in selectedTickets)
            {
                await ticketsClient.DeleteAsync(ticketId);

                // Update the progress bar and the toast.
                progressToastParameters.Content.Progress += 100 / selectedTickets.Count;
                if (progressToastParameters.Content.Progress > 100) progressToastParameters.Content.Progress = 100;

                toastService.UpdateToast("Delete", progressToastParameters);
            }

            toastService.ShowCommunicationToast(Toasts.ConfirmToastParameters(loc["DeleteSuccessToastTitle"], loc["DeleteSuccessToastDetails"]));
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["DeleteErrorToastTitle"], loc["DeleteErrorToastDetails"]));
        }
        finally
        {
            toastService.ClearQueueProgressToasts();

            // Deselect all tickets.
            selectedTickets.Clear();

            // Reload the tickets.
            await LoadTicketsAsync(await GetBaseFiltersAsync());
        }
    }

    private async Task HandleConfirmCloseAsync()
    {
        var progressToastParameters = Toasts.ProgressToastParameters("Close", loc["CloseProgressToastTitle"], loc["CloseProgressToastDetails"]);

        toastService.ShowProgressToast(progressToastParameters);

        try
        {
            foreach (var ticketId in selectedTickets)
            {
                var getResponse = await ticketsClient.GetAsync(ticketId);

                // Update the ticket status to Closed.
                var requestDto = mapper.Map<TicketRequestDto>(getResponse);
                requestDto.Status = Status.Closed;

                await ticketsClient.PutAsync(ticketId, requestDto);

                // Update the progress bar and the toast.
                progressToastParameters.Content.Progress += 100 / selectedTickets.Count;
                if (progressToastParameters.Content.Progress > 100) progressToastParameters.Content.Progress = 100;

                toastService.UpdateToast("Close", progressToastParameters);
            }

            toastService.ShowCommunicationToast(Toasts.ConfirmToastParameters(loc["CloseSuccessToastTitle"], loc["CloseSuccessToastDetails"]));
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["CloseErrorToastTitle"], loc["CloseErrorToastDetails"]));
        }
        finally
        {
            toastService.ClearQueueProgressToasts();

            // Deselect all tickets.
            selectedTickets.Clear();

            // Reload the tickets.
            await LoadTicketsAsync(await GetBaseFiltersAsync());
        }
    }

    private async Task HandleAssignAsync(Guid operatorId)
    {
        var progressToastParameters = Toasts.ProgressToastParameters("Assign", loc["AssignProgressToastTitle"], loc["AssignProgressToastDetails"]);

        toastService.ShowProgressToast(progressToastParameters);

        try
        {
            foreach (var ticketId in selectedTickets)
            {
                var getResponse = await ticketsClient.GetAsync(ticketId);

                // Update the ticket assignee.
                var requestDto = mapper.Map<TicketRequestDto>(getResponse);
                requestDto.OperatorUserId = operatorId;

                await ticketsClient.PutAsync(ticketId, requestDto);

                // Update the progress bar and the toast.
                progressToastParameters.Content.Progress += 100 / selectedTickets.Count;
                if (progressToastParameters.Content.Progress > 100) progressToastParameters.Content.Progress = 100;

                toastService.UpdateToast("Assign", progressToastParameters);
            }

            toastService.ShowCommunicationToast(Toasts.ConfirmToastParameters(loc["AssignSuccessToastTitle"], loc["AssignSuccessToastDetails"]));
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["AssignErrorToastTitle"], loc["AssignErrorToastDetails"]));
        }
        finally
        {
            toastService.ClearQueueProgressToasts();

            // Deselect all tickets.
            selectedTickets.Clear();

            // Reload the tickets.
            await LoadTicketsAsync(await GetBaseFiltersAsync());
        }
    }

    private async Task HandleStateChangedAsync()
    {
        await LoadTicketsAsync(await GetBaseFiltersAsync());
    }

    private void HandleSortTitleClick(string order)
    {
        currentSort = loc["SortTitleMenuItem"];
        currentSortDirection = order;
        ApplySelectedFiltersAndSort();
    }

    private void HandleSortLastUpdateClick(string order)
    {
        currentSort = loc["SortLastUpdateMenuItem"];
        currentSortDirection = order;
        ApplySelectedFiltersAndSort();
    }

    private void HandleSortPriorityClick(string order)
    {
        currentSort = loc["SortPriorityMenuItem"];
        currentSortDirection = order;
        ApplySelectedFiltersAndSort();
    }

    private void HandleFilterUserClick(UserResponseDto user)
    {
        activeUserFilter = user;
        ApplySelectedFiltersAndSort();
    }

    private void HandleFilterLastUpdateClick(DateTimeOffset dateTime)
    {
        activeDateFilter = dateTime;
        ApplySelectedFiltersAndSort();
    }

    private void HandleFilterCategoryClick(TicketType type)
    {
        activeTypeFilter = type;
        ApplySelectedFiltersAndSort();
    }

    private void HandleFilterPlatformClick(PlatformResponseDto platform)
    {
        activePlatformFilter = platform;
        ApplySelectedFiltersAndSort();
    }

    private void HandleFilterPriorityClick(Priority priority)
    {
        activePriorityFilter = priority;
        ApplySelectedFiltersAndSort();
    }
    #endregion

    #region Auxiliary functions
    private string GetPriorityFilterBadgeText()
    {
        return activePriorityFilter switch
        {
            Priority.Low => loc["FilterPriorityLowMenuItem"],
            Priority.Medium => loc["FilterPriorityMediumMenuItem"],
            Priority.High => loc["FilterPriorityHighMenuItem"],
            _ => string.Empty
        };
    }

    private string GetTypeFilterBadgeText()
    {
        return activeTypeFilter switch
        {
            TicketType.Bug => loc["FilterCategoryBugMenuItem"],
            TicketType.Feature => loc["FilterCategoryFeatureMenuItem"],
            _ => string.Empty
        };
    }

    private async Task<IEnumerable<KeyValuePair<string, string>>> GetBaseFiltersAsync()
    {
        IEnumerable<KeyValuePair<string, string>> filters = [];

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var entraUser = authState.User;

        if (entraUser.IsAuthenticated())
        {
            var dbUser = await usersClient.GetAsync(entraUser.GetEmail()!);

            filters = filters.Union(GetFiltersFromUserType(entraUser, dbUser));
            filters = filters.Union(GetFilterFromSelectedTab(entraUser));
        }

        return filters;
    }

    private IEnumerable<KeyValuePair<string, string>> GetFiltersFromUserType(ClaimsPrincipal entraUser, UserResponseDto dbUser)
    {
        if (entraUser.GetTenantId() == configuration["Entra:TenantId"])
        {
            return [];
        }
        else
        {
            return new Dictionary<string, string> { { nameof(TicketResponseDto.CreatorUserId), dbUser.Id.ToString() } };
        }
    }

    private IEnumerable<KeyValuePair<string, string>> GetFilterFromSelectedTab(ClaimsPrincipal entraUser)
    {
        return currentTab switch
        {
            "AllTab" => [],
            "UnassignedTab" => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.Unassigned) } },
            "ToReplyTab" when entraUser.GetTenantId() == configuration["Entra:TenantId"] => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.WaitingOperator) } },
            "ToReplyTab" when entraUser.GetTenantId() != configuration["Entra:TenantId"] => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.WaitingUser) } },
            "WaitingTab" when entraUser.GetTenantId() == configuration["Entra:TenantId"] => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.WaitingUser) } },
            "WaitingTab" when entraUser.GetTenantId() != configuration["Entra:TenantId"] => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.WaitingOperator) } },
            "ClosedTab" => new Dictionary<string, string> { { nameof(TicketResponseDto.Status), nameof(Status.Closed) } },
            _ => []
        };
    }

    private void ApplySelectedFiltersAndSort()
    {
        var filteredTickets = ApplyFilters(originalTickets);

        filteredTickets = ApplySort(filteredTickets);

        tickets = filteredTickets;
    }

    private IEnumerable<TicketResponseDto>? ApplyFilters(IEnumerable<TicketResponseDto>? tickets)
    {
        // Apply all active filters
        if (activeUserFilter is not null)
            tickets = tickets?.Where(t => t.OperatorUserId == activeUserFilter.Id || t.CreatorUserId == activeUserFilter.Id);

        if (activePlatformFilter is not null)
            tickets = tickets?.Where(t => t.PlatformId == activePlatformFilter.Id);

        if (activePriorityFilter.HasValue)
            tickets = tickets?.Where(t => t.Priority == activePriorityFilter);

        if (activeTypeFilter.HasValue)
            tickets = tickets?.Where(t => t.Type == activeTypeFilter);

        if (activeDateFilter.HasValue)
            tickets = tickets?.Where(t => t.LastUpdateDateTime >= activeDateFilter);

        return tickets;
    }

    private IEnumerable<TicketResponseDto>? ApplySort(IEnumerable<TicketResponseDto>? tickets)
    {
        // Apply only the current sort
        if (currentSort == loc["SortTitleMenuItem"])
        {
            return currentSortDirection == "asc" ? tickets?.OrderBy(t => t.Title) : tickets?.OrderByDescending(t => t.Title);
        }
        else if (currentSort == loc["SortLastUpdateMenuItem"])
        {
            return currentSortDirection == "asc" ? tickets?.OrderBy(t => t.LastUpdateDateTime) : tickets?.OrderByDescending(t => t.LastUpdateDateTime);
        }
        else if (currentSort == loc["SortPriorityMenuItem"])
        {
            return currentSortDirection == "asc" ? tickets?.OrderBy(t => t.Priority) : tickets?.OrderByDescending(t => t.Priority);
        }

        return tickets;
    }
#endregion
}