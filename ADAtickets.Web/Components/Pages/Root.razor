<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@page "/"
@using System.Net
@using System.Security.Claims
@using ADAtickets.Client
@using ADAtickets.Shared.Dtos.Requests
@using ADAtickets.Shared.Dtos.Responses
@using ADAtickets.Shared.Extensions
@using ADAtickets.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Identity.Web

@inject IConfiguration configuration
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject UsersClient usersClient
@inject AzureDevOpsClient azureDevOpsClient

@attribute [AllowAnonymous]

<PageTitle>ADAtickets</PageTitle>
<div style="width: 100%; display: flex; align-items: center; justify-content: center; padding: 2rem; flex-direction: column;">
    <FluentProgressRing Width="10rem"/>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsAuthenticated())
        {
            try
            {
                var loggedInUser = await CheckUserAgainstDatabase(authState.User);

                if (loggedInUser.Type is UserType.User)
                {
                    navigationManager.NavigateTo("/tickets", true);
                }
                else
                {
                    if (await HasUserAzureDevOpsPermissions(loggedInUser))
                    {
                        navigationManager.NavigateTo("/tickets", true);
                    }
                    else
                    {
                        navigationManager.NavigateTo("/azure-devops-noaccess", true);
                    }
                }
            }
            catch
            {
                navigationManager.NavigateTo("/error", true);
            }
        }
        else
        {
            navigationManager.NavigateTo("/welcome", true);
        }
    }

    private async Task<UserResponseDto> CheckUserAgainstDatabase(ClaimsPrincipal user)
    {
        var userEmail = user.GetEmail()!;

        try
        {
            return await usersClient.GetAsync(userEmail);
        }
        catch (HttpRequestException ex) when (ex.StatusCode is HttpStatusCode.NotFound)
        {
            return await usersClient.PostAsync(new UserRequestDto
            {
                Email = userEmail,
                Username = user.GetUsername()!,
                Name = user.GetName()!,
                Surname = user.GetSurname()!,
                Type = InferUserType(user),
                AreEmailNotificationsEnabled = false
            });
        }
    }

    private UserType InferUserType(ClaimsPrincipal user)
    {
        if (user.GetTenantId() == configuration["Entra:TenantId"])
        {
            return user.IsDevOpsAdmin() ? UserType.Admin : UserType.Operator;
        }

        return UserType.User;
    }

    private async Task<bool> HasUserAzureDevOpsPermissions(UserResponseDto loggedInUser)
    {
        return await azureDevOpsClient.GetUserDevOpsAccessAsync(loggedInUser.Email);
    }

}