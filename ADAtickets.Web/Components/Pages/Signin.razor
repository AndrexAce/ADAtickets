<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise's repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@page "/signin-oidc-entra"
@page "/signin-oidc-external-entra"

@using ADAtickets.Client
@using ADAtickets.Client.Extensions
@using ADAtickets.Shared.Constants
@using ADAtickets.Shared.Dtos
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Identity.Abstractions

@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject IConfiguration configuration
@inject AzureDevOpsClient azureDevOpsClient

@attribute [Authorize(Policy = Policy.Everyone)]

<PageTitle>ADAtickets</PageTitle>
<style>
    body {
        background: var(--neutral-layer-2);
    }
</style>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            // Takes the user email to check if it is listed in Azure DevOps members.
            var tenantId = user.Claims?.FirstOrDefault(c => c.Type.Equals("http://schemas.microsoft.com/identity/claims/tenantid"))?.Value;
            var primaryTenantId = configuration.GetSection("Entra:TenantId").Value;

            if (tenantId == primaryTenantId)
            {
                var (code, hasAccess) = await azureDevOpsClient.GetUserDevOpsAccessAsync(user.Identity.Name!);

                // If the request was completed and the user has access, go to home. Otherwise, go to a no-access page.
                navManager.NavigateTo((code.IsSuccess() && (hasAccess?.Value ?? false)) ? "/home" : "/no-access", true);
            }
            else
            {
                navManager.NavigateTo("/home", true);
            }
        }
    }
}