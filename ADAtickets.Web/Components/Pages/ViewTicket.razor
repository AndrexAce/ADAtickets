<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@implements IAsyncDisposable
@page "/ticket/{ticketId:guid}"
@layout MainLayout

@using System.Text.RegularExpressions
@using ADAtickets.Client
@using ADAtickets.Shared.Constants
@using ADAtickets.Shared.Extensions
@using ADAtickets.Shared.Dtos.Requests
@using ADAtickets.Shared.Dtos.Responses
@using ADAtickets.Shared.Models
@using ADAtickets.Web.Components.Layout
@using ADAtickets.Web.Components.Shared
@using ADAtickets.Web.Utilities
@using AutoMapper
@using Humanizer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Identity.Web
@using static ADAtickets.Web.Utilities.Dialogs

@inject IStringLocalizer<ViewTicket> loc
@inject IToastService toastService
@inject IDialogService dialogService
@inject IMessageService messageService
@inject IConfiguration configuration
@inject IMapper mapper
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject SignalRService signalRService
@inject TicketsClient ticketsClient
@inject AttachmentsClient attachmentsClient
@inject UsersClient usersClient

@attribute [Authorize(Policy = Policy.Everyone)]

<PageTitle>ADAtickets - @loc["Title"]</PageTitle>
<FluentStack Orientation="Orientation.Vertical">
    <FluentMessageBarProvider Section="TOP" ClearAfterNavigation="true" />
    <FluentStack Orientation="Orientation.Horizontal" Style="height: 100%;">
        <FluentCard Style="background: var(--neutral-layer-1)">
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
                <FluentButton IconStart="@(new Icons.Regular.Size20.ArrowLeft())" OnClick="HandleBackButtonClick">@loc["BackButtonText"]</FluentButton>
                @if (!isDeleted && ticket is not null && ticket.Status != Status.Closed)
                {
                    <FluentStack Orientation="Orientation.Horizontal" Width="fit-content">
                        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Checkmark())" OnClick="HandleCloseButtonClickAsync">@loc["CloseButtonText"]</FluentButton>
                        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Edit())" OnClick="HandleEditButtonClickAsync">@loc["EditButtonText"]</FluentButton>
                    </FluentStack>
                }
            </FluentStack>
            <FluentSpacer Width="1" />
            <FluentLabel Typo="Typography.Header">@loc["TicketInfoHeaderText"]</FluentLabel>
            <FluentDivider Orientation="Orientation.Horizontal" Role="DividerRole.Presentation" />
            <FluentSpacer Width="1" />
            @if (ticket is null)
            {
                <div style="width: 100%; display: flex; align-items: center; padding: 2rem; flex-direction: column;">
                    <FluentProgressRing />
                </div>
            }
            else
            {
                <FluentLabel Weight="FontWeight.Bold">@loc["TicketStatusText"]</FluentLabel>
                <p>@GetStatusBadge(ticket.Status)</p>

                <FluentLabel Weight="FontWeight.Bold">@loc["TicketAssignedOperatorText"]</FluentLabel>
                <p>@(ticket.OperatorName ?? loc["NoOperatorAssignedText"])</p>

                <FluentLabel Weight="FontWeight.Bold">@loc["TicketLastUpdateDateTimeText"]</FluentLabel>
                <p>@ticket.LastUpdateDateTime.ToLocalTime().Humanize()</p>

                <FluentLabel Weight="FontWeight.Bold">@loc["TicketTypeText"]</FluentLabel>
                <p>@GetTypeText(ticket.Type)</p>

                <FluentLabel Weight="FontWeight.Bold">@loc["TicketPlatformText"]</FluentLabel>
                <p>@ticket.PlatformName</p>

                <FluentLabel Weight="FontWeight.Bold">@loc["TicketTitleText"]</FluentLabel>
                <p>@ticket.Title</p>

                <FluentLabel Weight="FontWeight.Bold">@loc["TicketDescriptionText"]</FluentLabel>
                <p>@ticket.Description</p>

                <FluentLabel Weight="FontWeight.Bold">@loc["TicketPriorityText"]</FluentLabel>
                <p>@GetPriorityBadge(ticket.Priority)</p>

                <FluentLabel Weight="FontWeight.Bold">@loc["TicketAttachmentsText"]</FluentLabel>
                @if (photoPath is null && videoPath is null)
                {
                    <p>@loc["NoAttachmentsText"]</p>
                }
                else
                {
                    <FluentStack Orientation="Orientation.Vertical">
                        @if (photoPath is not null)
                        {
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                                <span style="overflow: hidden; text-overflow: ellipsis; max-width: 15rem">@Path.GetFileName(photoPath)</span>
                                <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Open())" OnClick="HandleViewPhotoClick">@loc["ViewButtonText"]</FluentButton>
                            </FluentStack>
                        }

                        @if (videoPath is not null)
                        {
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                                <span style="overflow: hidden; text-overflow: ellipsis; max-width: 15rem">@Path.GetFileName(videoPath)</span>
                                <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Open())" OnClick="HandleViewVideoClick">@loc["ViewButtonText"]</FluentButton>
                            </FluentStack>
                        }
                    </FluentStack>
                }
            }
        </FluentCard>
        <FluentStack Orientation="Orientation.Vertical" Style="height: 100%;">
            <FluentCard Style="background: var(--neutral-layer-1); height: 50%;">
                <FluentLabel Typo="Typography.Header">@loc["HistoryHeaderText"]</FluentLabel>
                <FluentDivider Orientation="Orientation.Horizontal" Role="DividerRole.Presentation" />
                <FluentSpacer Width="1" />
                @if (ticket is null)
                {
                    <div style="width: 100%; display: flex; align-items: center; padding: 2rem; flex-direction: column;">
                        <FluentProgressRing />
                    </div>
                }
                else
                {
                    <EditsList TicketId="ticket.Id" />
                }
            </FluentCard>
            <FluentCard Style="background: var(--neutral-layer-1); height: 50%;">
                <FluentLabel Typo="Typography.Header">@loc["RepliesHeaderText"]</FluentLabel>
                <FluentDivider Orientation="Orientation.Horizontal" Role="DividerRole.Presentation" />
                <FluentSpacer Width="1" />
                @if (ticket is null)
                {
                    <div style="width: 100%; display: flex; align-items: center; padding: 2rem; flex-direction: column;">
                        <FluentProgressRing />
                    </div>
                }
                else
                {
                    <RepliesList Ticket="ticket" />
                }
            </FluentCard>
        </FluentStack>
    </FluentStack>
</FluentStack>

@if (photoPath is not null)
{
    <FluentOverlay @bind-Visible=@showPhoto
                   Opacity="0.4"
                   FullScreen="true"
                   PreventScroll="true"
                   Dismissable="false">
        <FluentCard>
            <FluentStack Orientation="Orientation.Vertical">
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentLabel Typo="Typography.PaneHeader">@loc["PhotoPreview"]</FluentLabel>
                    <FluentSpacer />
                    <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.DismissCircle())"
                                  OnClick="HandleViewPhotoClose">@loc["ClosePreview"]</FluentButton>
                </FluentStack>
                <img src="@($"http://localhost:7213/{photoPath}")" style="max-width: 75vw; max-height: 75vh;" />
            </FluentStack>
        </FluentCard>
    </FluentOverlay>
}
@if (videoPath is not null)
{
    <FluentOverlay @bind-Visible=@showVideo
                   Opacity="0.4"
                   FullScreen="true"
                   PreventScroll="true"
                   Dismissable="false">
        <FluentCard>
            <FluentStack Orientation="Orientation.Vertical">
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentLabel Typo="Typography.PaneHeader">@loc["VideoPreview"]</FluentLabel>
                    <FluentSpacer />
                    <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.DismissCircle())"
                                  OnClick="HandleViewVideoClose">@loc["ClosePreview"]</FluentButton>
                </FluentStack>
                <video src="@($"http://localhost:7213/{videoPath}")" style="max-width: 75vw; max-height: 75vh;" controls />
            </FluentStack>
        </FluentCard>
    </FluentOverlay>
}

@code {
    [Parameter]
    public Guid TicketId { get; set; }

    private TicketResponseDto? ticket;
    private string? photoPath;
    private string? videoPath;
    private bool showPhoto;
    private bool showVideo;
    private bool isDeleted;

    override protected async Task OnInitializedAsync()
    {
        // Subscribe to refresh events
        await SetupSignalRAsync();

        // Load the ticket details
        await LoadTicketAsync();
    }

    private async Task SetupSignalRAsync()
    {
        // Register handlers for API-triggered methods
        Action handlersRegistration = () =>
        {
            signalRService.On<Guid>("TicketUpdated", HandleUpdateRefreshRequestedAsync);
            signalRService.On<Guid>("TicketDeleted", HandleDeleteRefreshRequestedAsync);
        };

        // Connect to the hub
        await signalRService.StartAsync($"{configuration["ADAticketsAPI:BaseUrl"]}/ticketsHub", handlersRegistration);
    }

    private async Task LoadTicketAsync()
    {
        try
        {
            ticket = await ticketsClient.GetAsync(TicketId);

            var attachments = await attachmentsClient.GetAllAsync(
                new Dictionary<string, string> { { nameof(AttachmentResponseDto.TicketId), ticket.Id.ToString() } }
            );

            photoPath = attachments.FirstOrDefault(a => Regex.IsMatch(Path.GetFileName(a.Path), @"\.(png|jpg|jpeg|gif|webp)$"))?.Path;
            videoPath = attachments.FirstOrDefault(a => Regex.IsMatch(Path.GetFileName(a.Path), @"\.(mp4|webm)$"))?.Path;
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["LoadingErrorToastTitle"], loc["LoadingErrorToastDetails"]));
        }
    }

    private async Task HandleUpdateRefreshRequestedAsync(Guid ticketId)
    {
        // If the ticket has been updated, refresh the ticket details
        if (ticketId == TicketId)
        {
            await LoadTicketAsync();

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleDeleteRefreshRequestedAsync(Guid ticketId)
    {
        // If the ticket has been deleted, disable editing and replying and show a warning
        if (ticketId == TicketId)
        {
            isDeleted = true;

            await messageService.ShowMessageBarAsync(options =>
            {
                options.Title = loc["TicketDeletedMessageBarTitle"];
                options.Intent = MessageIntent.Warning;
                options.Section = "TOP";
                options.AllowDismiss = false;
            });

            await InvokeAsync(StateHasChanged);
        }
    }

    private void HandleBackButtonClick()
    {
        navigationManager.NavigateTo("/my-tickets", true);
    }

    private async Task HandleCloseButtonClickAsync()
    {
        await dialogService.ShowDialogAsync<SimpleDialog>(
            new SimpleDialogContent
            {
                Message = loc["CloseConfirmDialogMessage"],
                ConfirmAction = HandleConfirmCloseAsync,
                ConfirmButtonIcon = new Icons.Regular.Size20.Checkmark()
            },
            ConfirmDialogParameters(loc["CloseConfirmDialogTitle"], loc["CloseConfirmDialogConfirmButton"], loc["CloseConfirmDialogCancelButton"]));
    }

    private async Task HandleConfirmCloseAsync()
    {
        try
        {
            var getResponse = await ticketsClient.GetAsync(TicketId);

            // Update the ticket status to Closed.
            var requestDto = mapper.Map<TicketRequestDto>(getResponse);
            requestDto.Status = Status.Closed;
            requestDto.Requester = await GetUserIdAsync();

            await ticketsClient.PutAsync(TicketId, requestDto);

            toastService.ShowCommunicationToast(Toasts.ConfirmToastParameters(loc["CloseSuccessToastTitle"], loc["CloseSuccessToastDetails"]));
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["CloseErrorToastTitle"], loc["CloseErrorToastDetails"]));
        }
    }

    private async Task HandleEditButtonClickAsync()
    {
        await dialogService.ShowDialogAsync<TicketDialog>(
            new TicketDialogContent
            {
                IsEdit = true,
                IsUser = await IsUserAsync(),
                InitialTicketData = ticket
            },
            new DialogParameters
            {
                TrapFocus = false,
                PreventScroll = true,
                PreventDismissOnOverlayClick = true
            }
        );
    }

    private void HandleViewPhotoClick()
    {
        showPhoto = true;
    }

    private void HandleViewVideoClick()
    {
        showVideo = true;
    }

    private void HandleViewPhotoClose()
    {
        showPhoto = false;
    }

    private void HandleViewVideoClose()
    {
        showVideo = false;
    }

    private RenderFragment GetPriorityBadge(Priority priority) => @<FluentBadge Fill="highlight"
                                                                                    BackgroundColor="@GetPriorityAppearance(priority)"
                                                                                    Circular="true">
    @GetPriorityText(priority)
    </FluentBadge>;

    private RenderFragment GetStatusBadge(Status status) => @<FluentBadge Fill="highlight"
                                                                              BackgroundColor="@GetStatusAppearance(status)"
                                                                              Circular="true">
    @GetStatusText(status)
    </FluentBadge>;

    private static string GetPriorityAppearance(Priority priority) => priority switch
    {
        Priority.Low => "var(--success)",
        Priority.Medium => "var(--warning)",
        Priority.High => "var(--error)",
        _ => ""
    };

    private string GetPriorityText(Priority priority) => priority switch
    {
        Priority.Low => loc["PriorityLow"],
        Priority.Medium => loc["PriorityMedium"],
        Priority.High => loc["PriorityHigh"],
        _ => ""
    };

    private static string GetStatusAppearance(Status status) => status switch
    {
        Status.Unassigned => "var(--info)",
        Status.WaitingUser => "var(--warning)",
        Status.WaitingOperator => "var(--error)",
        Status.Closed => "var(--success)",
        _ => ""
    };

    private string GetStatusText(Status status) => status switch
    {
        Status.Unassigned => loc["StatusUnassigned"],
        Status.WaitingUser => loc["StatusWaitingUser"],
        Status.WaitingOperator => loc["StatusWaitingOperator"],
        Status.Closed => loc["StatusClosed"],
        _ => ""
    };

    private string GetTypeText(TicketType ticketType)
    {
        return ticketType switch
        {
            TicketType.Bug => loc["TicketTypeProblem"],
            TicketType.Feature => loc["TicketTypeSuggestion"],
            _ => ""
        };
    }

    private async Task<bool> IsUserAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.GetTenantId() == configuration["ExternalEntra:TenantId"];
    }

    private async Task<Guid?> GetUserIdAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsAuthenticated())
        {
            var loggedInUser = await usersClient.GetAsync(user.GetEmail()!);

            return loggedInUser?.Id;
        }

        return null;
    }

    public async ValueTask DisposeAsync()
    {
        await signalRService.StopAsync();
    }
}