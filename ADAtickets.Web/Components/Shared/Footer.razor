<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@inherits ComponentBase

<FluentButton Appearance="Appearance.Accent" IconStart="@themeIcon" OnClick="UpdateTheme"></FluentButton>
<CultureSelector/>

<FluentDesignTheme @bind-Mode="@mode" CustomColor="#7A6040" StorageName="theme" OnLuminanceChanged="UpdateTheme"/>

@code {

    /// <summary>
    ///     Represent whether the current theme has a dark luminance.
    /// </summary>
    [Parameter]
    public bool IsDarkThemeActive { get; set; }

    /// <summary>
    ///     Propagates the modification of the <see cref="IsDarkThemeActive" /> parameter to the parent components.
    /// </summary>
    [Parameter]
    public EventCallback<bool> IsDarkThemeActiveChanged { get; set; }

    private DesignThemeModes mode = DesignThemeModes.System;
    private Icon? themeIcon;

    protected override void OnInitialized()
    {
        switch (mode)
        {
            case DesignThemeModes.Light:
                themeIcon = new Size20.WeatherSunny();
                break;
            case DesignThemeModes.Dark:
                themeIcon = new Size20.WeatherMoon();
                break;
            case DesignThemeModes.System:
                themeIcon = new Size20.Color();
                break;
        }
    }

    private void UpdateTheme(MouseEventArgs e)
    {
        switch (mode)
        {
            case DesignThemeModes.Light:
                mode = DesignThemeModes.Dark;
                themeIcon = new Size20.WeatherMoon();
                break;
            case DesignThemeModes.Dark:
                mode = DesignThemeModes.System;
                themeIcon = new Size20.Color();
                break;
            case DesignThemeModes.System:
                mode = DesignThemeModes.Light;
                themeIcon = new Size20.WeatherSunny();
                break;
        }
    }

    private void UpdateTheme(LuminanceChangedEventArgs e)
    {
        IsDarkThemeActive = e.IsDark;
        IsDarkThemeActiveChanged.InvokeAsync(e.IsDark);
    }

}