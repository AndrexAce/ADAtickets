<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@inherits ComponentBase
@implements IAsyncDisposable

@using ADAtickets.Client
@using ADAtickets.Shared.Dtos.Responses
@using ADAtickets.Shared.Extensions
@using ADAtickets.Web.Components.Utilities
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular

@inject IDialogService dialogService
@inject IStringLocalizer<Header> loc
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject IConfiguration configuration
@inject SignalRService signalRService
@inject UsersClient usersClient
@inject UserNotificationsClient userNotificationsClient

<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="20">
    @if (IsDarkThemeActive)
    {
        <a href="/my-tickets">
            <img class="logo-icon" src="Images/Logos/LogoDark.svg" alt="@loc["ADAticketsLogoAlt"]"/>
        </a>
    }
    else
    {
        <a href="/my-tickets">
            <img class="logo-icon" src="Images/Logos/LogoLight.svg" alt="@loc["ADAticketsLogoAlt"]"/>
        </a>
    }
    <FluentLabel Typo="Typography.Header" Color="Color.Fill">ADAtickets</FluentLabel>
    <FluentSpacer/>
    <FluentProfileMenu FullName="@accountName" ImageSize="5rem" EMail="@accountEmail" HeaderLabel="@loc["HeaderLabel"]"
                       OnHeaderButtonClick="SignOutAsync" HeaderButton="@loc["HeaderButton"]"
                       FooterLink="@loc["FooterLink"]" OnFooterLinkClick="OpenEditProfilePanel">
        <StartTemplate>@accountUsername</StartTemplate>
    </FluentProfileMenu>
    @if (isNewNotificationPresent && isUnreadNotificationPresent)
    {
        <FluentButton Appearance="Appearance.Neutral" OnClick="OpenNotificationsPanel" IconStart="@(new Size20.AlertBadge())" />
    }
    else if (!isNewNotificationPresent && isUnreadNotificationPresent)
    {
        <FluentButton Appearance="Appearance.Neutral" OnClick="OpenNotificationsPanel" IconStart="@(new Size20.Alert())" />
    }
    else
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="OpenNotificationsPanel" IconStart="@(new Size20.Alert())" />
    }
</FluentStack>

@code {
    [CascadingParameter] private bool IsDarkThemeActive { get; set; }

    private IEnumerable<UserNotificationResponseDto> userNotifications = [];

    private string? accountName;
    private string? accountEmail;
    private string? accountUsername;

    private bool isNewNotificationPresent;
    private bool isUnreadNotificationPresent;

    protected override async Task OnInitializedAsync()
    {
        await SetupSignalR();

        await LoadUserNotificationsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.IsAuthenticated())
            {
                accountName = user.GetFullName();
                accountEmail = user.GetEmail();
                accountUsername = user.GetUsername();

                StateHasChanged();
            }
        }
    }

    private async Task SetupSignalR()
    {
        // Register handlers for API-triggered methods
        Action handlersRegistration = () =>
        {
            signalRService.On("NotificationUpdated", () => HandleRefreshRequested(false));
            signalRService.On("NotificationDeleted", () => HandleRefreshRequested(false));
            signalRService.On("UserNotificationCreated", () => HandleRefreshRequested(true));
            signalRService.On("UserNotificationUpdated", () => HandleRefreshRequested(true));
            signalRService.On("UserNotificationDeleted", () => HandleRefreshRequested(false));
        };

        // Connect to the hub
        await signalRService.StartAsync($"{configuration["ADAticketsAPI:BaseUrl"]}/notificationsHub", handlersRegistration);
        // Join the personal group for notifications
        await signalRService.SendAsync("JoinPersonalGroup", await GetUserIdAsync());
    }

    private async Task LoadUserNotificationsAsync()
    {
        var userId = await GetUserIdAsync();

        if (userId.HasValue)
        {
            userNotifications = await userNotificationsClient.GetAllAsync(
                new Dictionary<string, string>
                {
                    { nameof(UserNotificationResponseDto.ReceiverUserId), userId.Value.ToString() }
                }
            );
        }

        isUnreadNotificationPresent = userNotifications.Any(un => !un.IsRead);
    }

    private async Task HandleRefreshRequested(bool showNewNotificationBadge)
    {
        await LoadUserNotificationsAsync();

        if (showNewNotificationBadge) isNewNotificationPresent = true;

        await InvokeAsync(StateHasChanged);
    }

    private async Task SignOutAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsAuthenticated())
        {
            navigationManager.NavigateTo("CustomAccount/SignOut", true);
        }
    }

    private async Task OpenEditProfilePanel()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await dialogService.ShowPanelAsync<ProfileEditPanel>(user, Dialogs.PanelParameters());
    }

    private async Task OpenNotificationsPanel()
    {
        isNewNotificationPresent = false;

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await dialogService.ShowPanelAsync<NotificationsPanel>(user, Dialogs.PanelParameters());
    }

    private async Task<Guid?> GetUserIdAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsAuthenticated())
        {
            var loggedInUser = await usersClient.GetAsync(user.GetEmail()!);

            return loggedInUser?.Id;
        }

        return null;
    }

    public async ValueTask DisposeAsync()
    {
        await signalRService.StopAsync();
    }
}