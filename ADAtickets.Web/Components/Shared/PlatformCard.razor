<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@inherits ComponentBase

@using ADAtickets.Client
@using ADAtickets.Shared.Dtos.Responses

<FluentCard Width="stretch" Style="background: var(--neutral-layer-1);">
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentStack Orientation="Orientation.Vertical">
            <FluentLabel Weight="FontWeight.Bold">@Platform.Name</FluentLabel>
            <span>@Platform.RepositoryUrl</span>
        </FluentStack>
        @if (IsImported)
        {
            <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Delete())" OnClick="HandleDeletePlatformAsync" />
        }
        else
        {  
            <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.ArrowRight())" OnClick="HandleRegisterPlatformAsync" />
        }
    </FluentStack>
</FluentCard>

@code {

    [Parameter]
    public required PlatformResponseDto Platform { get; set; }

    [Parameter]
    public bool IsImported { get; set; }

    [Parameter]
    public EventCallback<PlatformResponseDto> OnDelete { get; set; }

    [Parameter]
    public EventCallback<PlatformResponseDto> OnRegister { get; set; }

    async Task HandleDeletePlatformAsync()
    {
        await OnDelete.InvokeAsync(Platform);
    }

    async Task HandleRegisterPlatformAsync()
    {
        await OnRegister.InvokeAsync(Platform);
    }

}
