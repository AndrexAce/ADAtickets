<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@implements IDialogContentComponent<ClaimsPrincipal>
@using System.Dynamic
@using System.Security.Claims
@using System.Text
@using System.Text.Json
@using ADAtickets.Client
@using ADAtickets.Shared.Constants
@using ADAtickets.Shared.Dtos.Requests
@using ADAtickets.Shared.Dtos.Responses
@using ADAtickets.Shared.Extensions
@using ADAtickets.Web.Components.Utilities
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Microsoft.Identity.Abstractions
@using Microsoft.Identity.Web
@using static Utilities.Dialogs

@inject IStringLocalizer<ProfileEditPanel> loc
@inject IToastService toastService
@inject IDialogService dialogService
@inject IConfiguration configuration
@inject IDownstreamApi downstreamApi
@inject UsersClient usersClient
@inject UserPlatformsClient userPlatformsClient
@inject PlatformsClient platformsClient

<FluentDialogHeader ShowDismiss="false" ShowDismissTooltip="false">
    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right">
            @if (!isEdit)
            {
                <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size20.Edit())"
                              OnClick="HandleEditClick">@loc["Edit"]</FluentButton>
            }
            else
            {
                <FluentButton Id="SubmitEdit"
                              Type="ButtonType.Submit"
                              Appearance="Appearance.Accent"
                              IconStart="@(new Size20.Save())"
                              FormId="user_form">@loc["Save"]</FluentButton>
            }
            <FluentButton Appearance="Appearance.Lightweight" IconStart="@(new Size20.Dismiss())"
                          OnClick="HandleCancelClickAsync"/>
        </FluentStack>
        <FluentLabel Typo="Typography.PaneHeader">@loc["ProfileEditPanelTitle"]</FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    @if (!isEdit)
    {
        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Start">
            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">@loc["ProfilePictureLabel"]</FluentLabel>
            <FluentPersona ImageSize="7.5rem" Initials="@GetInitials(Content.GetFullName())"
                           Style="align-self: center"/>

            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">@loc["EmailLabel"]</FluentLabel>
            <FluentLabel Typo="Typography.Body">@Content.GetEmail()</FluentLabel>

            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">@loc["UsernameLabel"]</FluentLabel>
            <FluentLabel Typo="Typography.Body">@Content.GetUsername()</FluentLabel>

            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">@loc["NameLabel"]</FluentLabel>
            <FluentLabel Typo="Typography.Body">@Content.GetName()</FluentLabel>

            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">@loc["SurnameLabel"]</FluentLabel>
            <FluentLabel Typo="Typography.Body">@Content.GetSurname()</FluentLabel>

            <AuthorizeView Policy="@Policy.OperatorOrAdmin">
                <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">@loc["FavouriteAppsLabel"]</FluentLabel>
                <FluentLabel Typo="Typography.Body">@favouritePlatformNames</FluentLabel>
            </AuthorizeView>
        </FluentStack>
    }
    else
    {
        <EditForm id="user_form" Model="@UserRequest" OnValidSubmit="HandleValidSubmitAsync" FormName="user_form">
            <DataAnnotationsValidator/>
            <FluentValidationSummary Model="@UserRequest"/>

            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Start">
                <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">@loc["ProfilePictureLabel"]</FluentLabel>
                <FluentPersona ImageSize="7.5rem" Initials="@GetInitials(Content.GetFullName())"
                               Style="align-self: center"/>

                <FluentTextField Name="Email"
                                 Label="@loc["EmailLabel"]"
                                 Spellcheck="true"
                                 Style="width: 100%"
                                 ReadOnly="true"
                                 @bind-Value="UserRequest.Email">
                    <FluentIcon Value="@(new Size20.Mention())" Color="@Color.Neutral" Slot="start"/>
                </FluentTextField>
                <FluentValidationMessage For="@(() => UserRequest.Email)"/>

                <FluentTextField Name="Username"
                                 Label="@loc["UsernameLabel"]"
                                 Spellcheck="true"
                                 Style="width: 100%"
                                 @bind-Value="UserRequest.Username"
                                 Required>
                    <FluentIcon Value="@(new Size20.Person())" Color="@Color.Neutral" Slot="start"/>
                </FluentTextField>
                <FluentValidationMessage For="@(() => UserRequest.Email)"/>

                <FluentTextField Name="Email"
                                 Label="@loc["NameLabel"]"
                                 Spellcheck="false"
                                 Style="width: 100%"
                                 @bind-Value="UserRequest.Name"
                                 Required>
                    <FluentIcon Value="@(new Size20.PersonNote())" Color="@Color.Neutral" Slot="start"/>
                </FluentTextField>
                <FluentValidationMessage For="@(() => UserRequest.Name)"/>

                <FluentTextField Name="Email"
                                 Label="@loc["SurnameLabel"]"
                                 Spellcheck="false"
                                 Style="width: 100%"
                                 @bind-Value="UserRequest.Surname"
                                 Required>
                    <FluentIcon Value="@(new Size20.PersonNote())" Color="@Color.Neutral" Slot="start"/>
                </FluentTextField>
                <FluentValidationMessage For="@(() => UserRequest.Surname)"/>

                <AuthorizeView Policy="@Policy.OperatorOrAdmin">
                    <ChildContent Context="selectContext">
                        <FluentSelect TOption="PlatformResponseDto"
                                      Label="@loc["FavouriteAppsLabel"]"
                                      Name="PlatformId"
                                      Items="platforms"
                                      Multiple="true"
                                      OptionText="@(p => p.Name)"
                                      OptionValue="@(p => p.Id.ToString())"
                                      @bind-SelectedOptions="favouritePlatforms">
                            <FluentIcon Value="@(new Size20.Apps())" Color="@Color.Neutral"
                                        Slot="indicator"/>
                        </FluentSelect>
                    </ChildContent>
                </AuthorizeView>
            </FluentStack>
        </EditForm>
    }
</FluentDialogBody>

<FluentDialogFooter Visible="false"/>

@code {

    /// <summary>
    ///     The dialog object bound to this component.
    /// </summary>
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    /// <summary>
    ///     Necessary data to display the dialog.
    /// </summary>
    [Parameter]
    public required ClaimsPrincipal Content { get; set; }

    [SupplyParameterFromForm] private UserRequestDto UserRequest { get; } = new();

    private bool isEdit;
    private IEnumerable<PlatformResponseDto>? platforms;
    private IEnumerable<PlatformResponseDto>? favouritePlatforms;
    private string? favouritePlatformNames;
    private Guid? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!await IsDbUserConsistentWithEntra())
            {
                await AlignDbUserWithEntra();
            }

            // Initialize the UserRequest with data from the Content ClaimsPrincipal
            if (Content.Identity is not null && Content.Identity.IsAuthenticated)
            {
                UserRequest.Email = Content.GetEmail() ?? string.Empty;
                UserRequest.Name = Content.GetName() ?? string.Empty;
                UserRequest.Surname = Content.GetSurname() ?? string.Empty;
                UserRequest.Username = Content.GetUsername() ?? string.Empty;
            }

            if (Content.GetTenantId() == configuration["Entra:TenantId"])
            {
                await GetPlatforms();
                await GetFavouritePlatforms();
                GetFavouritePlatformsName();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["LoadingErrorToastTitle"], loc["LoadingErrorToastDetails"]));

            await Dialog.CancelAsync();
        }
    }

    private async Task<bool> IsDbUserConsistentWithEntra()
    {
        var getResponse = await usersClient.GetAsync(Content.GetEmail()!);

        return getResponse.Email == Content.GetEmail() && getResponse.Username == Content.GetUsername() && getResponse.Name == Content.GetName() && getResponse.Surname == Content.GetSurname();
    }

    private async Task AlignDbUserWithEntra()
    {
        var newData = new UserRequestDto
        {
            Email = Content.GetEmail() ?? string.Empty,
            Username = Content.GetUsername() ?? string.Empty,
            Name = Content.GetName() ?? string.Empty,
            Surname = Content.GetSurname() ?? string.Empty
        };

        await usersClient.PutAsync(Content.GetEmail() ?? string.Empty, newData);
    }

    private async Task GetPlatforms()
    {
        platforms = await platformsClient.GetAllAsync();
    }

    private async Task GetFavouritePlatforms()
    {
        var getResponse = await userPlatformsClient.GetAllAsync(new Dictionary<string, string> { { nameof(UserPlatformRequestDto.UserId), await GetCurrentUserId() } });

        favouritePlatforms = platforms!.Where(p => getResponse.Any(up => up.PlatformId == p.Id));
    }

    private void GetFavouritePlatformsName()
    {
        var favouritePlatformsJoinedString = string.Join(",", favouritePlatforms!.Select(p => p.Name));

        favouritePlatformNames = string.IsNullOrWhiteSpace(favouritePlatformsJoinedString)
            ? loc["NoFavouritePlatformLabel"]
            : favouritePlatformsJoinedString;
    }

    private async Task<string> GetCurrentUserId()
    {
        currentUserId = (await usersClient.GetAsync(Content.GetEmail()!)).Id;

        return currentUserId.ToString()!;
    }

    private void HandleEditClick()
    {
        isEdit = !isEdit;
    }

    private async Task HandleCancelClickAsync()
    {
        if (isEdit)
        {
            await dialogService.ShowDialogAsync<SimpleDialog>(
                new SimpleDialogContent
                {
                    Message = loc["CancelConfirmDialogMessage"],
                    ConfirmAction = HandleConfirmCancel,
                    ConfirmButtonIcon = new Size20.EditOff()
                },
                ConfirmDialogParameters(loc["CancelConfirmDialogTitle"], loc["CancelConfirmDialogConfirmButton"], loc["CancelConfirmDialogCancelButton"]));
        }
        else
        {
            await Dialog.CancelAsync();
        }
    }

    private Task HandleConfirmCancel()
    {
        isEdit = false;

        return Task.CompletedTask;
    }

    private async Task HandleValidSubmitAsync()
    {
        await Dialog.CloseAsync();

        try
        {
            // Prepare data to update the user
            HttpContent patchContent = new StringContent(PrepareJsonPatchContent(), Encoding.UTF8, "application/json");

            // Update the user with Microsoft Graph
            var response = await downstreamApi.CallApiForUserAsync(
                InferServiceName(Content),
                options =>
                {
                    options.HttpMethod = nameof(HttpMethod.Patch);
                    options.RelativePath = $"users/{Content.GetUserId()}";
                    options.AcquireTokenOptions.AuthenticationOptionsName = InferAuthenticationScheme(Content);
                },
                Content,
                patchContent);

            // If the user was successfully updated in Microsoft Graph, update the user in the database
            if (response.IsSuccessStatusCode)
            {
                await usersClient.PutAsync(Content.GetEmail()!, UserRequest);

                toastService.ShowCommunicationToast(Toasts.ConfirmToastParameters(loc["ProfileEditSuccessToastTitle"], loc["ProfileEditSuccessToastDetails"]));
            }
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["ProfileEditErrorToastTitle"], loc["ProfileEditErrorToastDetails"]));
        }
    }

    private static string GetInitials(string? fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
        {
            return string.Empty;
        }

        return fullName.Split(' ')
            .Where(part => !string.IsNullOrWhiteSpace(part))
            .Select(part => part[0])
            .Aggregate(string.Empty, (acc, initial) => acc + initial);
    }

    private static string GetUserTenantId(ClaimsPrincipal user)
    {
        if (user.Identity is null)
        {
            throw new InvalidOperationException("The user is not authenticated.");
        }

        if (!user.Identity.IsAuthenticated)
        {
            throw new InvalidOperationException("The user is not authenticated.");
        }

        var tid = user.GetTenantId();

        return tid is null ? throw new InvalidOperationException("The user is not authenticated.") : tid;
    }

    private string InferServiceName(ClaimsPrincipal user)
    {
        var tenantId = GetUserTenantId(user);
        var primaryTenantId = configuration.GetSection($"{Scheme.OpenIdConnectDefault}:TenantId").Value;

        return tenantId == primaryTenantId ? Service.Graph : Service.ExternalGraph;
    }

    private string InferAuthenticationScheme(ClaimsPrincipal user)
    {
        var tenantId = GetUserTenantId(user);
        var primaryTenantId = configuration.GetSection($"{Scheme.OpenIdConnectDefault}:TenantId").Value;

        return tenantId == primaryTenantId ? Scheme.OpenIdConnectDefault : Scheme.ExternalOpenIdConnectDefault;
    }

    private string PrepareJsonPatchContent()
    {
        dynamic jsonContent = new ExpandoObject();

        jsonContent.DisplayName = UserRequest.Username;
        jsonContent.GivenName = UserRequest.Name;
        jsonContent.Surname = UserRequest.Surname;

        return JsonSerializer.Serialize(jsonContent);
    }

}