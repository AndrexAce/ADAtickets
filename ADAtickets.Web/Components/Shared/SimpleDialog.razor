<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@implements IDialogContentComponent<SimpleDialogContent>

@using ADAtickets.Web.Components.Pages
@using static ADAtickets.Web.Components.Utilities.Dialogs

<FluentDialogHeader ShowDismiss="false" ShowDismissTooltip="false">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <p>@Content.Message</p>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" IconStart="Content.ConfirmButtonIcon" OnClick="HandleConfirmAsync">@Dialog.Instance.Parameters.PrimaryAction</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="HandleCancelAsync">@Dialog.Instance.Parameters.SecondaryAction</FluentButton>
</FluentDialogFooter>

@code {
    /// <summary>
    /// The dialog object bound to this component.
    /// </summary>
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    /// <summary>
    /// Necessary data to display the dialog.
    /// </summary>
    [Parameter]
    public SimpleDialogContent Content { get; set; } = default!;

    private async Task HandleConfirmAsync(MouseEventArgs args)
    {
        await Dialog.CloseAsync();

        if (Content.ConfirmAction != null)
        {
            await Content.ConfirmAction.Invoke();
        }
    }

    private async Task HandleCancelAsync(MouseEventArgs args)
    {
        await Dialog.CancelAsync();
    }
}
