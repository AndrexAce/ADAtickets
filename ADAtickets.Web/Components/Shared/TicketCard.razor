<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@inherits ComponentBase

@using ADAtickets.Client
@using ADAtickets.Shared.Dtos.Requests
@using ADAtickets.Shared.Dtos.Responses
@using ADAtickets.Shared.Models
@using ADAtickets.Web.Components.Utilities
@using AutoMapper
@using Humanizer
@using System.Net
@using static ADAtickets.Web.Components.Utilities.Dialogs

@inject IStringLocalizer<TicketCard> loc
@inject UsersClient usersClient
@inject TicketsClient ticketsClient
@inject IToastService toastService
@inject IDialogService dialogService
@inject IMapper mapper

<FluentCard Id="@(Ticket.Id.ToString())" Style="background: var(--neutral-layer-1)" Width="20rem">
    <FluentStack Orientation="Orientation.Vertical">
        <FluentStack Orientation="Orientation.Horizontal">
            @if (Users is null)
            {
                <FluentSkeleton Shape="SkeletonShape.Circle" Shimmer="true" />
                <FluentSkeleton Height="3.5rem" Width="4rem" Shimmer="true" />
                <FluentSpacer />
            }
            else
            {
                <FluentPersona ImageSize="3rem">
                    <FluentStack Orientation="Orientation.Vertical">
                        <p>@Ticket.CreatorName</p>
                        <FluentStack Orientation="Orientation.Horizontal">
                            <FluentIcon Value="@(new Icons.Filled.Size20.Bug())" />
                            <p>@(Ticket.CreationDateTime.Humanize())</p>
                        </FluentStack>
                    </FluentStack>
                </FluentPersona>
                <FluentSpacer />
                <FluentCheckbox Class="hover-hide" CheckStateChanged="HandleCheckStateChanged" />
            }
        </FluentStack>
        @if (Users is null)
        {
            <FluentSkeleton Height="1rem" Width="100%" Shimmer="true" />
            <FluentSkeleton Height="1rem" Width="100%" Shimmer="true" />
            <FluentSkeleton Height="2.5rem" Width="100%" Shimmer="true" />
        }
        else
        {
            <p>@Ticket.Title</p>
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
                @GetPriorityBadge(Ticket.Priority)
                @GetStatusBadge(Ticket.Status)
            </FluentStack>
            <FluentSpacer />
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
                <FluentButton Appearance="Appearance.Neutral" IconStart="@(new Icons.Regular.Size20.Open())">Apri</FluentButton>
                <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Edit())">Modifica</FluentButton>
            </FluentStack>
        }
    </FluentStack>
</FluentCard>

@if (Users is not null)
{
    <FluentMenu Anchor="@(Ticket.Id.ToString())" Trigger="MouseButton.Right" Anchored="false">
        <FluentLabel Typo="Typography.H6">@loc["EditStatusMenuLabel"]</FluentLabel>
        <FluentMenuItem Label="@loc["DeleteMenuItem"]" OnClick="HandleDeleteClick">
            <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.DeleteDismiss())" Color="Color.Neutral" Slot="start" /></span>
        </FluentMenuItem>
        <FluentMenuItem Label="@loc["CloseMenuItem"]" OnClick="HandleCloseClick">
            <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Checkmark())" Color="Color.Neutral" Slot="start" /></span>
        </FluentMenuItem>
        <FluentDivider />
        <FluentLabel Typo="Typography.H6">@loc["AssignmentMenuLabel"]</FluentLabel>
        <FluentMenuItem Label="@loc["AssignMenuItem"]">
            <ChildContent>
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size20.Person())" Color="Color.Neutral" Slot="start" /></span>
            </ChildContent>
            <MenuItems>
                @foreach (var user in Users ?? [])
                {
                    <FluentMenuItem Role="MenuItemRole.MenuItem" Label="@($"{user.Name} {user.Surname}")" OnClick="args => HandleAssignClick(user.Id)"/>
                }
            </MenuItems>
        </FluentMenuItem>
    </FluentMenu>
}

@code {
    [CascadingParameter]
    private IEnumerable<UserResponseDto>? Users { get; set; }

    /// <summary>
    /// The ticket the card is bound to.
    /// </summary>
    [Parameter]
    public required TicketResponseDto Ticket { get; set; }

    /// <summary>
    /// Indicates whether the card is selected.
    /// </summary>
    [Parameter]
    public bool Selected { get; set; } = false;

    /// <summary>
    /// Event callback that is triggered when the selected state changes.
    /// </summary>
    [Parameter]
    public EventCallback<SelectedChangedEventArgs> SelectedChanged { get; set; }

    /// <summary>
    /// Event callback that is triggered when the ticket state has changed.
    /// </summary>
    [Parameter]
    public EventCallback StateChanged { get; set; }

    private static RenderFragment GetPriorityBadge(Priority priority) => @<FluentBadge Fill="highlight" BackgroundColor="@GetPriorityAppearance(priority)" Circular="true">
    @priority.ToString()
    </FluentBadge>;

    private static RenderFragment GetStatusBadge(Status status) => @<FluentBadge Fill="highlight" BackgroundColor="@GetStatusAppearance(status)" Circular="true">
    @status.ToString()
    </FluentBadge>;

    private static string GetPriorityAppearance(Priority priority) => priority switch
    {
        Priority.Low => "var(--success)",
        Priority.Medium => "var(--warning)",
        Priority.High => "var(--error)",
        _ => ""
    };

    private static string GetStatusAppearance(Status status) => status switch
    {
        Status.Unassigned => "var(--info)",
        Status.WaitingUser => "var(--warning)",
        Status.WaitingOperator => "var(--error)",
        Status.Closed => "var(--success)",
        _ => ""
    };

    private async Task HandleCheckStateChanged(bool? checkState)
    {
        Selected = checkState ?? false;
        await SelectedChanged.InvokeAsync(new() { TicketId = Ticket.Id, IsSelected = Selected });
    }

    private async Task HandleDeleteClick()
    {
        await dialogService.ShowDialogAsync<SimpleDialog>(
            new SimpleDialogContent
            {
                Message = loc["DeleteConfirmDialogMessage"],
                ConfirmAction = HandleConfirmDelete,
                ConfirmButtonIcon = new Icons.Regular.Size20.DeleteDismiss(),
            },
            Dialogs.ConfirmDialogParameters(loc["DeleteConfirmDialogTitle"], loc["DeleteConfirmDialogConfirmButton"], loc["DeleteConfirmDialogCancelButton"]));
    }

    private async Task HandleCloseClick()
    {
        await dialogService.ShowDialogAsync<SimpleDialog>(
            new SimpleDialogContent
            {
                Message = loc["CloseConfirmDialogMessage"],
                ConfirmAction = HandleConfirmClose,
                ConfirmButtonIcon = new Icons.Regular.Size20.Checkmark(),
            },
            Dialogs.ConfirmDialogParameters(loc["CloseConfirmDialogTitle"], loc["CloseConfirmDialogConfirmButton"], loc["CloseConfirmDialogCancelButton"]));
    }

    private async Task HandleAssignClick(Guid operatorId)
    {
        await HandleAssign(operatorId);
    }

    private async Task HandleConfirmDelete()
    {
        try
        {
            var deleteResponse = await ticketsClient.DeleteAsync(Ticket.Id);

            // If the ticket could not be deleted, send an error.
            if (deleteResponse is HttpStatusCode.NoContent)
            {
                toastService.ShowCommunicationToast(Toasts.ConfirmToastParameters(loc["DeleteSuccessToastTitle"], loc["DeleteSuccessToastDetails"]));

                // Notify the parent component that the ticket has been deleted.
                await StateChanged.InvokeAsync();
            }
            else throw new HttpRequestException(deleteResponse.ToString(), null, deleteResponse);
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["DeleteErrorToastTitle"], loc["DeleteErrorToastDetails"]));
        }
    }

    private async Task HandleConfirmClose()
    {
        try
        {
            var getResponse = await ticketsClient.GetAsync(Ticket.Id);

            // If the ticket could not be retrieved, send an error.
            if (getResponse is (HttpStatusCode.OK, not null))
            {
                // Update the ticket status to Closed.
                var requestDto = mapper.Map<TicketRequestDto>(getResponse);
                requestDto.Status = Status.Closed;

                var putResponse = await ticketsClient.PutAsync(Ticket.Id, requestDto);

                // If the ticket could not be closed, send an error.
                if (putResponse is (HttpStatusCode.OK, not null))
                {
                    toastService.ShowCommunicationToast(Toasts.ConfirmToastParameters(loc["CloseSuccessToastTitle"], loc["CloseSuccessToastDetails"]));

                    // Notify the parent component that the ticket has been closed.
                    await StateChanged.InvokeAsync();
                }
                else throw new HttpRequestException(putResponse.Item1.ToString(), null, putResponse.Item1);
            }
            else throw new HttpRequestException(getResponse.Item1.ToString(), null, getResponse.Item1);
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["CloseErrorToastTitle"], loc["CloseErrorToastDetails"]));
        }
    }

    private async Task HandleAssign(Guid operatorId)
    {
        try
        {
            var getResponse = await ticketsClient.GetAsync(Ticket.Id);

            // If the ticket could not be found, skip it.
            if (getResponse is (HttpStatusCode.OK, not null))
            {
                // Update the ticket assignee.
                var requestDto = mapper.Map<TicketRequestDto>(getResponse);
                requestDto.OperatorUserId = operatorId;

                var putResponse = await ticketsClient.PutAsync(Ticket.Id, requestDto);

                // If the ticket could not be assigned, send an error.
                if (putResponse is (HttpStatusCode.OK, not null))
                {
                    toastService.ShowCommunicationToast(Toasts.ConfirmToastParameters(loc["AssignSuccessToastTitle"], loc["AssignSuccessToastDetails"]));

                    // Notify the parent component that the ticket has been assigned.
                    await StateChanged.InvokeAsync();
                }
                else throw new HttpRequestException(putResponse.Item1.ToString(), null, putResponse.Item1);
            }
            else throw new HttpRequestException(getResponse.Item1.ToString(), null, getResponse.Item1);
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["AssignErrorToastTitle"], loc["AssignErrorToastDetails"]));
        }
    }
}
