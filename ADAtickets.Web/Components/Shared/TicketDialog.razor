<!-- ADAtickets is a simple, lightweight, open source ticketing system
interacting with your enterprise repositories on Azure DevOps
with a two-way synchronization.
Copyright (C) 2025  Andrea Lucchese

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.-->
@implements IAsyncDisposable
@implements IDialogContentComponent<TicketDialogContent>

@using ADAtickets.Client
@using ADAtickets.Shared.Dtos.Forms
@using ADAtickets.Shared.Dtos.Requests
@using ADAtickets.Shared.Dtos.Responses
@using ADAtickets.Shared.Extensions
@using ADAtickets.Shared.Models
@using ADAtickets.Web.Components.Utilities
@using AutoMapper
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using System.Text.RegularExpressions
@using static Utilities.Dialogs

@inject IStringLocalizer<TicketDialog> loc
@inject TicketsClient ticketsClient
@inject UsersClient usersClient
@inject PlatformsClient platformsClient
@inject AttachmentsClient attachmentsClient
@inject AuthenticationStateProvider authenticationStateProvider
@inject IToastService toastService
@inject IDialogService dialogService
@inject IMapper mapper
@inject SignalRService signalRService
@inject IConfiguration configuration

<FluentDialogHeader ShowDismiss="false" ShowDismissTooltip="false">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        @if (Content.IsEdit)
        {
            <FluentLabel Typo="Typography.PaneHeader">
                @loc["EditTicket"]
            </FluentLabel>
        }
        else
        {
            <FluentLabel Typo="Typography.PaneHeader">
                @loc["NewTicket"]
            </FluentLabel>
        }
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <EditForm id="ticket_form" Model="@TicketForm" OnValidSubmit="HandleValidSubmitAsync" FormName="ticket_form">
        <DataAnnotationsValidator/>
        <FluentValidationSummary Model="@TicketForm"/>

        <FluentStack Orientation="Orientation.Vertical">
            @if (!Content.IsUser)
            {
                @if (Content.IsEdit)
                {
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="20">
                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentSelect TOption="UserResponseDto"
                                          Label="@loc["AssignedOperator"]"
                                          Name="OperatorUserId"
                                          Items="users"
                                          OptionText="@(u => $"{u.Name} {u.Surname}")"
                                          OptionValue="@(u => u.Id.ToString())"
                                          Placeholder="@loc["PleaseSelectAnOption"]"
                                          @bind-Value="TicketForm.OperatorUserId">
                            </FluentSelect>
                        </FluentStack>

                        @if (Content.InitialTicketData?.OperatorName is not null)
                        {
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentLabel Weight="FontWeight.Bold">@loc["CurrentValue"]</FluentLabel>
                                <span>@Content.InitialTicketData.OperatorName</span>
                            </FluentStack>
                        }
                    </FluentStack>
                }
                else
                {
                    <FluentLabel Weight="FontWeight.Bold">@loc["AssignedOperator"]</FluentLabel>
                    <p>@Content.InitialTicketData?.OperatorName</p>
                }
            }

            @if (Content.IsEdit && Content.IsUser)
            {
                <FluentLabel Weight="FontWeight.Bold">@loc["TicketType"]</FluentLabel>
                <p>@GetTypeText(TicketForm.Type)</p>

                <FluentLabel Weight="FontWeight.Bold">@loc["Platform"]</FluentLabel>
                <p>@Content.InitialTicketData?.PlatformName</p>
            }
            else
            {
                <FluentRadioGroup Name="Type"
                                  LabelTemplate="@TicketTypeLabel"
                                  Orientation="Orientation.Vertical"
                                  @bind-Value="TicketForm.Type"
                                  Required>
                    <FluentRadio Value="TicketType.Bug">@loc["Problem"]</FluentRadio>
                    <FluentRadio Value="TicketType.Feature">@loc["Suggestion"]</FluentRadio>
                </FluentRadioGroup>
                <FluentValidationMessage For="@(() => TicketForm.Type)"/>

                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="20">
                    <FluentStack Orientation="Orientation.Vertical">
                        <FluentSelect TOption="PlatformResponseDto"
                                      Label="@loc["Platform"]"
                                      Name="PlatformId"
                                      Items="platforms"
                                      OptionText="@(p => p.Name)"
                                      OptionValue="@(p => p.Id.ToString())"
                                      Placeholder="@loc["PleaseSelectAnOption"]"
                                      @bind-Value="TicketForm.PlatformId"
                                      Required>
                        </FluentSelect>
                        <FluentValidationMessage For="@(() => TicketForm.PlatformId)" />
                    </FluentStack>

                    @if (Content.IsEdit)
                    {
                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentLabel Weight="FontWeight.Bold">@loc["CurrentValue"]</FluentLabel>
                            <span>@Content.InitialTicketData?.PlatformName</span>
                        </FluentStack>
                    }
                </FluentStack>
            }

            @if (Content.IsEdit && !Content.IsUser)
            {
                <FluentLabel Weight="FontWeight.Bold">@loc["Title"]</FluentLabel>
                <p>@TicketForm.Title</p>

                <FluentLabel Weight="FontWeight.Bold">@loc["Description"]</FluentLabel>
                <p>@TicketForm.Description</p>
            }
            else
            {
                <FluentTextField Name="Title"
                                 Label="@loc["Title"]"
                                 Spellcheck="true"
                                 Style="width: 75%"
                                 ReadOnly="@(Content.IsEdit && !Content.IsUser)"
                                 @bind-Value="TicketForm.Title"
                                 Required>
                    <FluentIcon Value="@(new Size20.TextT())" Color="@Color.Neutral" Slot="start"/>
                </FluentTextField>
                <FluentValidationMessage For="@(() => TicketForm.Title)"/>

                <FluentTextArea Name="Description"
                                Label="@loc["Description"]"
                                Maxlength="5000"
                                Spellcheck="true"
                                Style="width: 100%"
                                ReadOnly="@(Content.IsEdit && !Content.IsUser)"
                                @bind-Value="TicketForm.Description"
                                Required/>
                <FluentValidationMessage For="@(() => TicketForm.Description)"/>
            }

            @if (Content.IsEdit && Content.IsUser)
            {
                <FluentLabel Weight="FontWeight.Bold">@loc["Priority"]</FluentLabel>
                <p>@GetPriorityText(TicketForm.Priority)</p>
            }
            else
            {
                <FluentRadioGroup Name="Priority"
                                  Label="@loc["Priority"]"
                                  Orientation="Orientation.Vertical"
                                  @bind-Value="TicketForm.Priority"
                                  Required>
                    <FluentRadio Value="Priority.Low">@loc["Low"]</FluentRadio>
                    <FluentRadio Value="Priority.Medium">@loc["Medium"]</FluentRadio>
                    <FluentRadio Value="Priority.High">@loc["High"]</FluentRadio>
                </FluentRadioGroup>
                <FluentValidationMessage For="@(() => TicketForm.Priority)"/>
            }

            @if (!Content.IsEdit || photoPath is not null || videoPath is not null)
            {
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentLabel Weight="FontWeight.Bold">@loc["Attachments"]</FluentLabel>
                    @if (!Content.IsEdit)
                    {
                        <FluentIcon Id="AttachmentsLabelButton" Icon="Size20.Info"></FluentIcon>
                        <FluentTooltip Anchor="AttachmentsLabelButton"
                                       Position="TooltipPosition.End">@loc["AttachmentsTooltip"]</FluentTooltip>
                    }
                </FluentStack>
                @if (!Content.IsEdit && photoPath is null)
                {
                    <FluentInputFile Id="photoUploader"
                                     Mode="InputFileMode.Stream"
                                     Accept="image/png,image/jpg,image/jpeg,image/gif,image/webp"
                                     OnCompleted="HandleUploadPhotoCompletedAsync">
                        <ChildContent>
                            <label for="photoUploader" style="margin-top: 0.3rem;">
                                <FluentIcon Value="@(new Size20.ArrowUpload())"/>
                            </label>
                            <div>
                                @loc["UploadImage"]
                            </div>
                        </ChildContent>
                    </FluentInputFile>
                }
                else if (photoPath is not null)
                {
                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                        <span
                            style="overflow: hidden; text-overflow: ellipsis; max-width: 15rem">@Path.GetFileName(photoPath)</span>
                        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size20.Open())"
                                      OnClick="HandleViewPhotoClick">@loc["View"]</FluentButton>

                        @if (!Content.IsEdit)
                        {
                            <FluentButton Appearance="Appearance.Accent"
                                          IconStart="@(new Size20.Delete())"
                                          OnClick="HandleDeletePhotoClick">@loc["Delete"]</FluentButton>
                        }
                    </FluentStack>
                }

                @if (!Content.IsEdit && videoPath is null)
                {
                    <FluentInputFile Id="videoUploader"
                                     Mode="InputFileMode.Stream"
                                     Accept="video/mp4,video/webm"
                                     OnCompleted="HandleUploadVideoCompletedAsync">
                        <ChildContent>
                            <label for="videoUploader" style="margin-top: 0.3rem;">
                                <FluentIcon Value="@(new Size20.ArrowUpload())"/>
                            </label>
                            <div>
                                @loc["UploadVideo"]
                            </div>
                        </ChildContent>
                    </FluentInputFile>
                }
                else if (videoPath is not null)
                {
                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                        <span 
                            style="overflow: hidden; text-overflow: ellipsis; max-width: 15rem">@Path.GetFileName(videoPath)</span>
                        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size20.Open())"
                                      OnClick="HandleViewVideoClick">@loc["View"]</FluentButton>

                        @if (!Content.IsEdit)
                        {
                            <FluentButton Appearance="Appearance.Accent"
                                          IconStart="@(new Size20.Delete())"
                                          OnClick="HandleDeleteVideoClick">@loc["Delete"]</FluentButton>
                        }
                    </FluentStack>
                }
            }
        </FluentStack>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End">
        @if (Content.IsEdit)
        {
            <FluentButton Id="SubmitEdit"
                          Type="ButtonType.Submit"
                          Appearance="Appearance.Accent"
                          IconStart="@(new Size20.Edit())"
                          FormId="ticket_form">@loc["Edit"]</FluentButton>
        }
        else
        {
            <FluentButton Id="SubmitCreate"
                          Type="ButtonType.Submit"
                          Appearance="Appearance.Accent"
                          IconStart="@(new Size20.Send())"
                          FormId="ticket_form">@loc["Create"]</FluentButton>
        }
        <FluentButton Appearance="Appearance.Neutral" OnClick="HandleCancelClickAsync">@loc["Cancel"]</FluentButton>
    </FluentStack>
</FluentDialogFooter>

@if (photoPath is not null)
{
    <FluentOverlay @bind-Visible=@showPhoto
                   Opacity="0.4"
                   FullScreen="true"
                   PreventScroll="true"
                   Dismissable="false">
        <FluentCard>
            <FluentStack Orientation="Orientation.Vertical">
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentLabel Typo="Typography.PaneHeader">@loc["PhotoPreview"]</FluentLabel>
                    <FluentSpacer/>
                    <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size20.DismissCircle())"
                                  OnClick="HandleViewPhotoClose">@loc["ClosePreview"]</FluentButton>
                </FluentStack>
                @if (!Content.IsEdit)
                {
                    <img src="@($"/{photoPath}")" style="max-width: 75vw; max-height: 75vh;"/>
                }
                else
                {
                    <img src="@($"http://localhost:7213/{photoPath}")" style="max-width: 75vw; max-height: 75vh;"/>
                }
            </FluentStack>
        </FluentCard>
    </FluentOverlay>
}
@if (videoPath is not null)
{
    <FluentOverlay @bind-Visible=@showVideo
                   Opacity="0.4"
                   FullScreen="true"
                   PreventScroll="true"
                   Dismissable="false">
        <FluentCard>
            <FluentStack Orientation="Orientation.Vertical">
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentLabel Typo="Typography.PaneHeader">@loc["VideoPreview"]</FluentLabel>
                    <FluentSpacer/>
                    <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size20.DismissCircle())"
                                  OnClick="HandleViewVideoClose">@loc["ClosePreview"]</FluentButton>
                </FluentStack>
                @if (!Content.IsEdit)
                {
                    <video src="@($"/{videoPath}")" style="max-width: 75vw; max-height: 75vh;" controls/>
                }
                else
                {
                    <video src="@($"http://localhost:7213/{videoPath}")" style="max-width: 75vw; max-height: 75vh;" controls/>
                }
            </FluentStack>
        </FluentCard>
    </FluentOverlay>
}

@code {

    /// <summary>
    ///     The dialog object bound to this component.
    /// </summary>
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    /// <summary>
    ///     Necessary data to display the dialog.
    /// </summary>
    [Parameter]
    public TicketDialogContent Content { get; set; } = default!;

    [SupplyParameterFromForm] private TicketFormDto TicketForm { get; set; } = new();

    private IEnumerable<PlatformResponseDto>? platforms;
    private IEnumerable<UserResponseDto>? users;

    private string? photoPath;
    private string? videoPath;

    private bool showPhoto;
    private bool showVideo;

    private string? startingOperatorId;

    private RenderFragment TicketTypeLabel => @<FluentStack Orientation="Orientation.Horizontal">
                                                  <FluentLabel>@loc["TicketType"]</FluentLabel>
                                                  @if ((!Content.IsEdit && Content.IsUser) || (Content.IsEdit && !Content.IsUser))
                                                  {
                                                      <FluentIcon Id="TicketTypeLabelButton"
                                                                  Icon="Size20.Info"></FluentIcon>
                                                      <FluentTooltip Anchor="TicketTypeLabelButton"
                                                                     Position="TooltipPosition.End">@loc["TicketTypeTooltip"]</FluentTooltip>
                                                  }
                                              </FluentStack>;

    protected override async Task OnInitializedAsync()
    {
        SetInputFileTexts(loc);

        try
        {
            users = await LoadUsersAsync(new Dictionary<string, string> { { nameof(UserRequestDto.Type), nameof(UserType.Operator) } });
            users = users.Union(await LoadUsersAsync(new Dictionary<string, string> { { nameof(UserRequestDto.Type), nameof(UserType.Admin) } }));

            platforms = await LoadPlatformsAsync();

            if (Content.InitialTicketData is TicketResponseDto initialTicketData)
            {
                // Subscribe to refresh events
                await SetupSignalRAsync();

                TicketForm = mapper.Map<TicketFormDto>(Content.InitialTicketData);

                // If the operator is editing the ticket, reset the operator and platform ids to empty the FluentSelect
                if (Content.IsEdit && !Content.IsUser)
                {
                    TicketForm.PlatformId = "";
                    startingOperatorId = TicketForm.OperatorUserId;
                    TicketForm.OperatorUserId = null;
                }

                var attachments = await LoadAttachmentsAsync(new Dictionary<string, string> { { nameof(AttachmentRequestDto.TicketId), initialTicketData.Id.ToString() } });

                photoPath = attachments.FirstOrDefault(a => Regex.IsMatch(Path.GetFileName(a.Path), @"\.(png|jpg|jpeg|gif|webp)$"))?.Path;
                videoPath = attachments.FirstOrDefault(a => Regex.IsMatch(Path.GetFileName(a.Path), @"\.(mp4|webm)$"))?.Path;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["LoadingErrorToastTitle"], loc["LoadingErrorToastDetails"]));
        }
    }

    private static void SetInputFileTexts(IStringLocalizer<TicketDialog> loc)
    {
        FluentInputFile.ResourceLoadingBefore = loc["ResourceLoadingBefore"];
        FluentInputFile.ResourceLoadingCompleted = loc["ResourceLoadingCompleted"];
    }

    private async Task<IEnumerable<UserResponseDto>> LoadUsersAsync(IEnumerable<KeyValuePair<string, string>> filters)
    {
        return await usersClient.GetAllAsync(filters);
    }

    private async Task<IEnumerable<PlatformResponseDto>> LoadPlatformsAsync()
    {
        return await platformsClient.GetAllAsync();
    }

    private async Task SetupSignalRAsync()
    {
        // Register handlers for API-triggered methods
        Action handlersRegistration = () =>
        {
            signalRService.On<Guid>("TicketUpdated", HandleRefreshRequested);
            signalRService.On<Guid>("TicketDeleted", HandleRefreshRequested);
        };

        // Connect to the hub
        await signalRService.StartAsync($"{configuration["ADAticketsAPI:BaseUrl"]}/ticketsHub", handlersRegistration);
    }

    private async Task<IEnumerable<AttachmentResponseDto>> LoadAttachmentsAsync(IEnumerable<KeyValuePair<string, string>> filters)
    {
        return await attachmentsClient.GetAllAsync(filters);
    }

    private async Task HandleRefreshRequested(Guid ticketId)
    {
        // If the ticket being edited was updated or cancelled, close the dialog with a warning.
        if (ticketId == Content.InitialTicketData?.Id)
        {
            await Dialog.CancelAsync();

            DeleteTempFiles();

            toastService.ShowCommunicationToast(Toasts.WarningToastParameters(loc["TicketChangedToastTitle"], loc["TicketChangedToastDetails"]));
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        await Dialog.CloseAsync();

        var progressToastParameters = Content.IsEdit ? Toasts.ProgressToastParameters("CreateUpdate", loc["UpdateProgressToastTitle"], loc["UpdateProgressToastDetails"]) : Toasts.ProgressToastParameters("CreateUpdate", loc["CreateProgressToastTitle"], loc["CreateProgressToastDetails"]);

        toastService.ShowProgressToast(progressToastParameters);

        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.IsAuthenticated())
            {
                var loggedInUser = await usersClient.GetAsync(user.GetEmail()!);

                SetAdditionalDataBeforeSending(loggedInUser);
            }

            var ticketResponse = Content.IsEdit ?
            await ticketsClient.PutAsync(Content.InitialTicketData!.Id, mapper.Map<TicketRequestDto>(TicketForm)) : 
            await ticketsClient.PostAsync(mapper.Map<TicketRequestDto>(TicketForm));

            // Update the progress bar and the toast.
            progressToastParameters.Content.Progress = Content.IsEdit ? 100 : 50;

            toastService.UpdateToast("CreateUpdate", progressToastParameters);

            // Create the attachments only if the ticket is being created for the first time.
            if (!Content.IsEdit)
            {
                await CreateAttachmentsAsync(ticketResponse!, progressToastParameters);

                // Update the progress bar and the toast.
                progressToastParameters.Content.Progress = 100;

                toastService.UpdateToast("CreateUpdate", progressToastParameters);

                toastService.ShowCommunicationToast(Toasts.ConfirmToastParameters(loc["CreateSuccessToastTitle"], loc["CreateSuccessToastDetails"]));
            }
            else
            {
                toastService.ShowCommunicationToast(Toasts.ConfirmToastParameters(loc["UpdateSuccessToastTitle"], loc["UpdateSuccessToastDetails"]));
            }
        }
        catch (Exception ex)
        {
            if (Content.IsEdit)
            {
                toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["UpdateErrorToastTitle"], loc["UpdateErrorToastDetails"]));
            }
            else
            {
                toastService.ShowCommunicationToast(Toasts.ErrorToastParameters(ex, loc["CreateErrorToastTitle"], loc["CreateErrorToastDetails"]));
            }
        }
        finally
        {
            toastService.ClearProgressToasts();
        }
    }

    private void SetAdditionalDataBeforeSending(UserResponseDto loggedInUser)
    {
        if (Content.IsEdit)
        {
            if (TicketForm.OperatorUserId is null && startingOperatorId is not null)
            {
                // If the ticket is being edited and unassigned from the operator, put it in the Unassigned status.
                TicketForm.Status = Status.Unassigned;
            }
            else if (TicketForm.OperatorUserId is not null && startingOperatorId is null)
            {
                // If the ticket is being edited and assigned to an operator for the first time, set the waiting status.
                TicketForm.Status = Status.WaitingOperator;
            }
            // Else, if assigned to another operator, keep the current status.

            // Set the person requesting the ticket write operation since it's required for PUT requests.
            TicketForm.Requester = loggedInUser.Id;
        }
        else
        {
            // Set the ticket creator to the current user.
            TicketForm.CreatorUserId = loggedInUser.Id;
        }
    }

    private async Task CreateAttachmentsAsync(TicketResponseDto ticketResponse, ToastParameters<ProgressToastContent> progressToastParameters)
    {
        if (photoPath is not null)
        {
            var photoAttachment = new AttachmentRequestDto
            {
                Name = Path.GetFileName(photoPath),
                TicketId = ticketResponse.Id,
                Content = await File.ReadAllBytesAsync(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", photoPath))
            };

            await attachmentsClient.PostAsync(photoAttachment);

            // Update the progress bar and the toast.
            progressToastParameters.Content.Progress = videoPath is null ? 100 : 75;

            toastService.UpdateToast("Create", progressToastParameters);
        }

        if (videoPath is not null)
        {
            var videoAttachment = new AttachmentRequestDto
            {
                Name = Path.GetFileName(videoPath),
                TicketId = ticketResponse.Id,
                Content = await File.ReadAllBytesAsync(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", videoPath))
            };

            await attachmentsClient.PostAsync(videoAttachment);

            // Update the progress bar and the toast.
            progressToastParameters.Content.Progress = 100;

            toastService.UpdateToast("Create", progressToastParameters);
        }
    }

    private async Task HandleCancelClickAsync()
    {
        await dialogService.ShowDialogAsync<SimpleDialog>(
            new SimpleDialogContent
            {
                Message = loc["CancelConfirmDialogMessage"],
                ConfirmAction = HandleConfirmCancelAsync,
                ConfirmButtonIcon = new Size20.DismissCircle()
            },
            ConfirmDialogParameters(loc["CancelConfirmDialogTitle"], loc["CancelConfirmDialogConfirmButton"], loc["CancelConfirmDialogCancelButton"]));
    }

    private async Task HandleConfirmCancelAsync()
    {
        await Dialog.CancelAsync();

        DeleteTempFiles();
    }

    private async Task HandleUploadPhotoCompletedAsync(IEnumerable<FluentInputFileEventArgs> args)
    {
        if (args.Any())
        {
            var file = args.First();

            var uploadsDir = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "temp");
            Directory.CreateDirectory(uploadsDir);

            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var fullPath = Path.Combine(uploadsDir, fileName);

            await using FileStream fs = new(fullPath, FileMode.Create);
            await file.Stream!.CopyToAsync(fs);
            await file.Stream!.DisposeAsync();

            photoPath = $"uploads/temp/{fileName}";
        }
    }

    private async Task HandleUploadVideoCompletedAsync(IEnumerable<FluentInputFileEventArgs> args)
    {
        if (args.Any())
        {
            var file = args.First();

            var uploadsDir = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "temp");
            Directory.CreateDirectory(uploadsDir);

            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var fullPath = Path.Combine(uploadsDir, fileName);

            await using FileStream fs = new(fullPath, FileMode.Create);
            await file.Stream!.CopyToAsync(fs);
            await file.Stream!.DisposeAsync();

            videoPath = $"uploads/temp/{fileName}";
        }
    }

    private void HandleDeletePhotoClick()
    {
        DeleteTempFiles();
        photoPath = null;
    }

    private void HandleDeleteVideoClick()
    {
        DeleteTempFiles();
        videoPath = null;
    }

    private void HandleViewPhotoClick()
    {
        showPhoto = true;
    }

    private void HandleViewVideoClick()
    {
        showVideo = true;
    }

    private void HandleViewPhotoClose()
    {
        showPhoto = false;
    }

    private void HandleViewVideoClose()
    {
        showVideo = false;
    }

    private void DeleteTempFiles()
    {
        if (photoPath is not null)
        {
            var fullPhotoPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", photoPath);

            if (File.Exists(fullPhotoPath))
            {
                File.Delete(fullPhotoPath);
            }
        }

        if (videoPath is not null)
        {
            var fullVideoPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", videoPath);

            if (File.Exists(fullVideoPath))
            {
                File.Delete(fullVideoPath);
            }
        }
    }

    private string GetTypeText(TicketType ticketType)
    {
        return ticketType switch
        {
            TicketType.Bug => loc["Problem"],
            TicketType.Feature => loc["Suggestion"],
            _ => ""
        };
    }

    private string GetPriorityText(Priority priority)
    {
        return priority switch
        {
            Priority.Low => loc["Low"],
            Priority.Medium => loc["Medium"],
            Priority.High => loc["High"],
            _ => ""
        };
    }

    public async ValueTask DisposeAsync()
    {
        await signalRService.StopAsync();
    }
}